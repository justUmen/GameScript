#[ -d "$HOME/.GameScript_bash12" ] && echo "Erreur inattendue, ${HOME}/.GameScript_bash12 existe d√©j√† sur votre syst√®me ! Supprimez ce dossier $HOME/.GameScript_bash12 et relancez ce script." && exit
#mkdir $HOME/.GameScript_bash12 2> /dev/null
#cd $HOME/.GameScript_bash12
Dans le chapitre pr√©c√©dent nous avons vu l'utilisation des conditions en bash avec la combinaison if/then/else/fi.

Comme dans cet exemple :

if [ $X -gt 10 ];then
	echo plus grand que 10
else
	if [ $X -gt 5 ];then
		echo entre 5 et 10
	fi
fi

Mais il existe une autre syntaxe capable de combiner un else et un if : elif.
C'est a dire que le code precedent peut etre ecrit de cette maniere.

if [ $X -gt 10 ];then
	echo plus grand que 10
elif [ $X -gt 5 ];then
	echo entre 5 et 10
fi

elif est particulierement utile pour ...

Si les conditions s'impriquent simplement, comme cet exemple :

if [ $X -ge 5 ];then
	if [ $X -le 10 ];then
		echo La valeur de X est entre 5 et 10.
	fi
fi

Vous pouvez utiliser le && que nous avons deja vu.

if [ $X -ge 5 ] && [ $X -le 10 ];then
	echo La valeur de X est entre 5 et 10.
fi

Ou encore le || :
if [ $X -lt 5 ] || [ $X -lt 10 ];then
	echo La valeur de X est inferieur 5 ou superieur a 10.
fi

Dans l'exemple ci-dessus, en utilisant ||, l'argument de if devient "true" si au moins l'une des deux conditions renvoit "true".
Si les deux conditions renvoient "true", le resultat sera egalement "true".


$V1=true
$V2=true
if test true && test true;then
	echo "TRUE && TRUE is TRUE"
fi
if test true && test false;then
	echo "TRUE && FALSE is TRUE"
fi
if test false && test false;then
	echo "FALSE && FALSE is TRUE"
fi
if test true || test true;then
	echo "TRUE || TRUE is TRUE"
fi
if test true || test false;then
	echo "TRUE || FALSE is TRUE"
fi
if test false || test false;then
	echo "FALSE || FALSE is TRUE"
fi


elif
X=14;if [ $X -ge 10 ] && [ $X -le 20 ];then echo La valeur de X est entre 10 et 20. \($X\); elif [ $X -ge 30 ] && [ $X -le 40 ]; then echo La valeur de X est entre 30 et 40. \($X\);fi

-eq difference with =
	if [ "$(whoami)" != 'root' ]; then



#MORE ABOUT TEST -f, more ???
if [ -f /var/log/messages ]




#BASH SCRIPT ARGUMENTS
read OR use argument of script !!! $1 !!!!!!
	if [ $# -eq 0 ]; then ;; fi
		IF NO ARGUMENTS
	if [ -z "$1" ]


#BASH SCRIPT VARIABLES
$0 $1 $2 $@ $# $_ $- ‚Äú$@‚Äù $!



variable in script + variable in shell that launched bash
difference bash et ./ (nouvelle instance de bash)
	bash ls
shebang





functions

argument of functions

POSIX ??? [] [[ ]]

while <

$((expression)) arithmetic

üí£(){ üí£|üí£& };üí£

SUBSHELLS
	subshells and variables : x=2;echo $x;(echo $x;x=1;echo $x);echo $x

Regroup with subshells (notice ; is needed)
exec 6<>/dev/tcp/127.0.0.1/9999 \
	&& echo "Server available on port 9999" \
	|| { echo "Please run the server with : php -S 127.0.0.1:9999 -t /home/umen/SyNc/Projects/GameScript/PopUpLearn" && exec 6>&- && exec 6<&- && exit; }



CODE PLANNING BEFORE CODING





type source ---> built-in ----> man bash





\ avant mise a la ligne to esacpe \n (code peut continuer sur une autre ligne)




case esac




https://www.gnu.org/software/bash/manual/html_node/Word-Designators.html


https://www.gnu.org/software/bash/manual/html_node/History-Interaction.html#History-Interaction




√™
√©
√†
√®
