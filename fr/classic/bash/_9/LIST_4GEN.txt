#[ -d "$HOME/.GameScript_bash9" ] && echo "Erreur innatendu, ${HOME}/.GameScript_bash9 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_bash9 et relancer ce script." && exit
#mkdir $HOME/.GameScript_bash9 2> /dev/null
#cd $HOME/.GameScript_bash9
#echo -e "echo Je suis code_bash\\\\npwd;ls\\\\nmkdir FOLDER">$HOME/.GameScript_bash9/code_bash;echo -e "echo Je suis code_bash2 et je ne fais rien de spécial.">$HOME/.GameScript_bash9/code_bash2;chmod +x $HOME/.GameScript_bash9/code_bash2
Bash peut être utilisé de manière interactive, comme nous le faisons depuis le chapitre 1, mais bash est aussi un langage de programmation.
Vous pouvez donc stocker toutes les commandes que vous avez apprises dans un fichier texte et demander à 'bash' de les lancer ligne par ligne.
+Affichez votre répertoire courant et son contenu avec : ${learn}pwd;ls${reset}.
!pwd;ls£Non
+Affichez le contenu du fichier 'code_bash'.
!cat code_bash£Non
Ce fichier 'code_bash' contient trois lignes de commande que vous devriez comprendre.
Pour lancez les commandes de ce fichier 'code_bash', il suffit de donner ce fichier en argument à la commande ${voc}bash${reset}.
+Faites donc : ${learn}bash code_bash${reset}
!bash code_bash£Non
+Listez les éléments du répertoire courant.
!ls£Non
Ici 'bash' a bien créé le dossier 'FOLDER' avec la commande ${learn}mkdir FOLDER${reset} contenu dans le fichier 'code_bash'.
Vous pouvez aussi utiliser tous les autres concepts que vous avez déjà appris dans les chapitres précédents.
+Faites par exemple : ${learn}cat code_bash|bash>/dev/null${reset}
!cat code_bash|bash>/dev/null£Non
Ici seul l'erreur de ${code}mkdir${reset} est envoyée dans le terminal, puisque les commandes ${code}ls${reset} et ${code}pwd${reset} utilisent la sortie standard.
Pour rappel, vous auriez pu également faire ${learn}cat code_bash|bash -${reset} ou utiliser le chemin absolu de ce fichier, avec par exemple ${learn}bash ~/.GameScript_bash9/code_bash${reset}.
Pour executer un fichier, vous pouvez aussi utiliser ${code}./${reset} avant le nom du fichier que vous voulez lancer.
+Faites donc : ${learn}./code_bash2${reset}
!./code_bash2£Non
+Faites la même chose pour 'code_bash'.
!./code_bash£Non
Ici en utilisant ${code}./${reset} nous avons un problème de permission.
Etrange puisque nous n'avons pas eu de soucis avec la commande ${learn}bash code_bash${reset}.
+Affichez les permissions de tous les éléments du répertoire courant qui commencent par 'code'.
!ls -l code*£Non
Pour pouvoir executer un fichier avec ${code}./${reset}, ce fichier doit avoir le droit d'execution (x).
Un fichier texte n'aura pas cette permission par défaut, vous devez donc l'ajouter manuellement.
+Donnez le droit d'execution sur 'code_bash' pour le propriétaire de ce fichier.
!chmod u+x code_bash£Non
On peut dire qu'au moment où un fichier texte devient executable, il se transforme en un ${voc}script${reset} ou ${voc}programme${reset}.
Autrement dit : ${voc}Un script bash est un simple fichier texte contenant des commandes bash.${reset}
+Executez maintenant 'code_bash' en utilisant ${code}./${reset}.
!./code_bash£Non
Vous avez peut être remarqué que ${code}./${reset} ne fait que remplacer votre répertoire courant.
C'est effectivement le cas, pour executer un fichier, il suffit de spécifier son chemin.
+Vous pouvez également utiliser son chemin absolu, faites donc : ${learn}~/.GameScript_bash9/code_bash${reset}
!~/.GameScript_bash9/code_bash£Non
Attention cependant lorsque vous utilisez le chemin absolu, les commandes du script utiliserons votre répertoire courant, ${voc}pas${reset} le dossier où se trouve votre script.
Par exemple si vous êtes dans le dossier '/var' et que vous faites ${learn}~/.GameScript_bash9/code_bash${reset}, la commande ${learn}mkdir FOLDER${reset} voudra créer le dossier '/var/FOLDER'.
Pour éviter toute surprise, je vous recommande d'utiliser le plus souvent possible, des chemins absolus dans vos scripts.
Dans les chapitres précédents nous avons vu que si vous voulez garder une trace d'une information, vous pouvez la stocker dans un fichier, comme par exemple ${code}ls>fichier${reset}.
Si cette information n'a pas besoin d'être sauvegardée sur votre disque, nous avons vu qu'elle pouvait aussi être directement envoyée à une autre commande, comme par exemple ${code}ls|wc${reset}.
Mais bash peut aussi mémoriser certaines informations sans avoir besoin de créer un nouveau fichier.
Bash est capable de les stocker dans ce que l'on appelle une ${voc}variable${reset}.
Une variable est un nom symbolique qui est associé à une valeur.
#name=bjornulf
Je viens de créer pour vous une variable qui porte le nom : 'name'.
+Afficher la valeur de cette variable avec : ${learn}echo \\$name${reset}
!echo \\$name£Non
Ce ${code}\\$${reset} précise que le texte qui suit est le nom d'une variable et qu'il ne faut pas l'afficher tel quel.
${code}echo name${reset} affichera bien évidemment le mot 'name' mais ${code}echo \\$name${reset} affichera la valeur de la variable 'name'.
Pour créer une nouvelle variable, il faudra simplement utiliser le nom voulu, le symbole ${code}=${reset} suivit de sa valeur.
+Créons donc une nouvelle variable 'chemin' qui contiendra le texte '/var/log' avec : ${learn}chemin=/var/log${reset}.
!chemin=/var/log£Non
Si votre commande contient des espaces, vous pouvez par exemple utiliser les délimiteurs ${learn}\\\"${reset} et ${learn}'${reset} que nous avons déjà vu avec la commande ${code}echo${reset}.
${learn}chemin=/var/log${reset} est équivalent à ${learn}chemin=\\"/var/log\\"${reset} et ${learn}chemin='/var/log'${reset}.
+Affichons maintenant le contenu de cette variable avec : ${learn}echo \\$chemin${reset}
!echo \\$chemin£Non
La commande ${code}echo${reset} affiche simplement le contenu de cette variable, mais les variables peuvent être utilisés par toutes les commandes.
+Affichez donc le contenu du dossier ${code}/var/log${reset} avec : ${learn}ls \\$chemin${reset}
!ls \\$chemin£Non
Lorsque vous avez fait ${learn}chemin=/var/log${reset}, comme la variable n'existait pas, elle a été créée.
Pour la modifier, la syntaxe est exactement la même.
+Modifier le contenu de la variable 'name' avec : ${learn}name=bob${reset}
!name=bob£Non
Attention à ne pas faire ${codeError}\\$name=bob${reset}, le symbole ${code}\\$${reset} ne devra être utilisé ${voc}que${reset} lors de l'utilisation de la variable, pas lors de sa modification.
+Affichez maintenant le nouveau contenu de la variable 'name' avec : ${learn}echo \\$name${reset}.
!echo \\$name£Non
Ici la valeur 'bjornulf' n'existe plus, votre commande ${learn}name=bob${reset} vient de la remplacer.
+Vous pouvez également ajouter du texte à la commande ${code}echo${reset}, avec par exemple : ${learn}echo mon nom est \\$name.${reset}
!echo mon nom est \\$name.£Non
Comme d'habitude, le '.' étant un caractère spécial, un espace n'est pas nécessaire.
+Maintenant essayez par exemple de rajouter 'by' à la suite de cette variable, pour afficher 'bobby', avec : ${learn}echo \\$nameby${reset}
!echo \\$nameby£Non
Ici 'by' se mélange avec le nom de la variable, mais la variable 'nameby' n'existe pas, ${code}echo${reset} affiche donc une chaine de caractère vide.
Pour remédier à ce problème, vous pouvez par exemple utiliser le caractère d'échappement après le nom de la variable, pour clairement séparer la prochaine lettre.
+Essayez donc d'utiliser la variable 'name' et le caractère d'échappement pour afficher : 'bobby'.
!echo \\$name\\\\by£Non
Attention, vous ne pouvez utiliser le caractère d'échappement qu'en dehors des délimiteurs ${code}'${reset} et ${code}\\"${reset}.
Car je vous le rappelle, le caractère d'échappement est utilisé avec les délimiteurs pour afficher des mises à la ligne, des tabulations. etc...
Une autre possibilité est de définir une limite à votre nom de variable, en utilisant les ${code}{}${reset}.
+Essayez donc de faire : ${learn}echo \\${name}by${reset}
!echo \\${name}by£Non
+Parfait, maintenant essayez : ${learn}echo \\"\\${name}by\\"${reset}
!echo \\"\\${name}by\\"£Non
Pour afficher un ${code}\\$${reset}, il faudra simplement faire ${code} \\\\$ ${reset}.
+Faites donc : ${learn}echo \\"\\\\\\$name=\\$name\\"${reset}
!echo \\"\\\\\\$name=\\$name\\"£Non
+Et enfin essayez : ${learn}echo '\\\\\\$name=\\$name'${reset}
!echo '\\\\\\$name=\\$name'£Non
Ici le résultat est très différent ! Tous les caractères entre les ${code}'${reset} sont affichés littéralement.
Les ${code}'${reset} sont donc très utiles si vous avez besoin d'afficher des caractères qui pourraient avoir une autre signification.
+Vous pouvez aussi utiliser tout en même temps, essayez : ${learn}echo '\\${name}='\\"\\$name. \\"ou \\$name\\\\\\by.${reset}
!echo '\\${name}='\\"\\$name. \\"ou \\$name\\\\by.£Non
Si vous comprenez parfaitement cette commande, vous avez tout compris.
Je le répète, la syntaxe de modification d'une variable est identique à celle de sa création.
Attention donc à ne pas modifier des variables importantes par erreur en pensant les créer.
N'hésitez pas à vérifier avec un ${code}echo${reset} si une variable portant ce nom existe déjà.
Votre environnement possède des variables importantes, appelés ${voc}variables d'environnement${reset}.
+Affichez donc vos ${voc}variables d'environnement${reset} avec : ${learn}printenv${reset}.
!printenv£Non
Une des variables d'environnement les plus importante est 'PATH'. (l'anglais de chemin)
+Pour afficher uniquement la variable PATH, faites donc : ${learn}printenv PATH${reset}
!printenv PATH£Non
'PATH' est une liste du chemin absolu de plusieurs dossiers que bash utilise pour simplifier les appels de commandes.
Ces dossiers sont sur une seule ligne et leurs chemins absolus sont séparés par des ${code}:${reset}.
Si votre variable d'environnement 'PATH' est mal configurée, vous risquez de rencontrer des difficultés à lancer certaines commandes.
Des commandes que nous avons déjà vu ensemble sont en fait stockées dans un des dossiers de la variable 'PATH'.
+Par exemple, pour savoir où se trouve la commande ${code}date${reset}, faites : ${learn}type date${reset}.
!type date£Non
${code}type${reset} nous permet de comprendre que l'appel de la commande ${code}date${reset} correspond en fait à ${code}/bin/date${reset}.
+Faites donc : ${learn}date;/bin/date${reset}.
!date;/bin/date£Non
Il est pour vous possible d'utiliser directement la commande ${code}date${reset} au lieu de taper ${code}/bin/date${reset}, car le chemin absolu '/bin' est dans votre variable 'PATH'.
Attention donc à ne pas modifier accidentellement le contenu de la variable 'PATH', certaines commandes deviendraient inutilisables !
Pour ajouter du contenu à une variable, il suffit de rajouter son nom au début de la modification.
+Par exemple, pour ajouter ':~/.GameScript_bash9' à la variable 'PATH' faites donc : ${learn}PATH=\\$PATH:~/.GameScript_bash9${reset}
!PATH=\\$PATH:~/.GameScript_bash9£Non
Ici ${code}\\$PATH${reset} est simplement traité comme une chaine de caractère, correspondant au contenu de la variable 'PATH'.
Auquel on y ajoute à la suite la chaine de caractère ':~/.GameScript_bash9'.
+Affichez le nouveau contenu de la variable 'PATH'.
!echo \\$PATH£Non
Ici vous pouvez voir que '~/.GameScript_bash9' a bien été rajouté à la suite de l'ancienne version de 'PATH'.
Mais les modifications que vous faites sur les variables sont valables ${voc}uniquement${reset} pour la session de bash que vous utilisez actuellement.
Ouvrir un autre terminal ${voc}réinitialisera${reset} les variables importantes, comme par exemple 'PATH', et ${voc}supprimera${reset} les autres, comme ici les variables 'name' et 'chemin'.
Mais pour l'instant, puisque le dossier '~/.GameScript_bash9' est dans votre d'environnement 'PATH', vous pouvez simplement lancer le script 'code_bash' en tapant 'code_bash'.
+Lancez donc 'code_bash'.
!code_bash£Non
+Déplacez vous dans le dossier 'FOLDER'.
!cd FOLDER£Non
+Lancez 'code_bash' à nouveau.
!code_bash£Non
+Maintenant faites donc : ${learn}pwd;ls${reset}.
!pwd;ls£Non
Ici vous devriez comprendre clairement les effets des chemins relatifs dans vos scripts dont je vous ai parlé auparavant.
Et on termine par le questionnaire !
#clean
