#[ -d "$HOME/House" ] && echo "Erreur inattendue, ${HOME}/House existe déjà sur votre système ! Supprimez ce dossier $HOME/House et relancez ce script." && exit
#mkdir $HOME/.GameScript_bash1 &> /dev/null
#cd $HOME/
Hey salut tout le monde et bienvenue dans le premier chapitre sur bash.
Avant de pouvoir apprendre notre première commande, il va falloir d'abord comprendre la logique derrière l'organisation des répertoires et des fichiers sur les systèmes d'exploitation de ${voc}type Unix${reset}, comme ${voc}Linux${reset}.
Commençons par nous intéresser aux 'répertoires', qui portent aussi le nom de 'dossiers'.
#real_tree_1
Vous pouvez imaginer le système d'organisation des dossiers comme un arbre.
Dans cet arbre les lignes qui représentent les dossiers sont en bleu ciel.
A la base de cet arbre vous avez le symbole ${code}/${reset} qui représente le ${voc}répertoire racine${reset}.
C'est un répertoire spécial qui contiendra TOUS les autres dossiers du système.
#real_tree_2
Dans cet arbre, à chaque fois qu'une branche se sépare de l'arbre, c'est un nouveau dossier.
Ce passage à une autre branche se remarque aussi dans les titres en bleu ciel avec l'apparition d'un nouveau symbole '/' supplémentaire.
Par exemple, ${code}/home/${reset} représente le dossier 'home' dans le ${voc}répertoire racine${reset}.
${code}/home/user/${reset} représente le dossier 'user', qui est dans le dossier 'home', qui est lui même dans le ${voc}répertoire racine${reset}.
Et ainsi de suite, comme par exemple : ${code}/home/user/Images/${reset}
Dans ce cas, 'Images' est dans 'user', 'user' est dans 'home' et 'home' est dans '/'.
Mais attention, pour représenter un répertoire, il n'est pas obligatoire de rajouter un '/' à la fin.
C'est à dire que ${learn}/home/user/${reset} est équivalent à ${learn}/home/user${reset}.
De même, ${learn}/home/${reset} et ${learn}/home${reset} sont équivalents.
#real_tree_3
Parlons maintenant des fichiers, dans mon arbre ils sont ici en vert. Ce sont dans mon exemple des 'feuilles' et sont directement acrochés à une branche, ou parfois même directement au tronc.
Ces fichiers appartiennent donc directement à un dossier. Mais nous avons ici quelques problèmes en rouge, des fichiers qui ne peuvent pas exister...
${codeError}fichier1${reset} ne peut pas exister car il y a déjà un fichier du même nom ${codeFile}fichier1${reset} dans le même répertoire. Ici le répertoire racine. (/fichier1)
En revanche, en haut, ${codeFile}fichier1${reset} peut exister car même si le nom du fichier est le même, ils ne sont pas dans le même dossier.
Les éléments d'un système de type Unix doivent avoir une référence unique : ici ${learn}/fichier1${reset} et ${learn}/home/fichier1${reset} ne sont pas en conflit.
Le fichier ${codeError}/home${reset} ne peut pas exister non plus car il y a déjà un dossier ${code}/home/${reset} qui utilise le même nom au même endroit.
Pour que ces fichiers puissent exister, il faut leur donner d'autres noms.
#real_tree_4
Ici, il suffit d'appeler le deuxième fichier 'fichier2' et le tour est joué.
Pour ${codeError}home${reset}, il suffit également de lui donner un autre nom qui ne pose pas de problème comme 'Home', avec un h majuscule.
Oui ! Dans un système d'exploitation de type Unix, les majuscules sont importantes. 'Home', avec un grand H et 'home' sont deux noms différents.
En informatique, quand les majuscules ne sont pas équivalentes aux minuscules, on dit que les noms sont ${voc}sensibles à la casse${reset}.
Effectivement, les systèmes de type Unix sont ${voc}sensibles à la casse${reset}. C'est à dire que 'home', 'Home', 'hOme', 'hoMe', 'homE', 'HoMe', 'hOmE', 'HOme', 'hoME', 'HomE', 'hOMe', 'HOME', etc... sont valides et différentes !
#tree_1
Il est aussi possible de représenter l'arborescence linux de cette manière.
#tree_2
Et ici le même exemple avec les fichiers. Identique à l'arbre que l'on a déjà vu.
#tree_3
Mais l'arborescence peut aussi être très claire sans les décalages.
Si ça n'est pas encore très intuitif pour vous, ne vous inquiétez pas.
Maintenant que vous connaissez la logique, avec le temps et la répétition ce sera pour vous très bientôt évident.
Ce genre de ligne, qui commence par ce '/' ou ${voc}répertoire racine${reset} s'appelle le ${voc}chemin absolu${reset} d'un fichier ou d'un dossier.
Elle représente avec précision uniquement le fichier ou dossier en question.
Ici il est impossible d'avoir deux lignes identiques.
Ce ${voc}chemin absolu${reset} est le concept le plus fondamental de la ligne de commande.
Maintenant nous pouvons voir notre première commande.
Commençons par créer un nouveau dossier avec la commande ${learn}mkdir${reset} (mkdir vient de l'anglais ${learn}M${reset}a${learn}K${reset}e ${learn}DIR${reset}ectory).
Il suffit de taper mkdir, suivi d'un espace et enfin du nom du dossier.
+Créeons maintenant le dossier House en faisant : ${learn}mkdir House${reset} puis validez la commande en appuyant sur la touche entrée.
!mkdir House£Non
+Affichons maintenant les dossiers et les fichiers avec un simple ${learn}ls${reset} (ls vient de l'anglais ${learn}L${reset}i${learn}S${reset}t).
!ls£Non
Vous devriez voir le dossier que vous venez de créer.
Maintenant rentrons dans ce dossier avec la commande ${learn}cd${reset} (cd vient de l'anglais ${learn}C${reset}hange ${learn}D${reset}irectory).
+Pour cela, il suffit de faire ${code}cd${reset}, suivi du nom du dossier voulu, dans notre cas : ${learn}cd House${reset}.
!cd House£Non
+Maintenant réaffichons les fichiers et dossiers avec un simple ${learn}ls${reset}.
!ls£Non
Ici le répertoire 'House' est vide, c'est normal puisque nous venons de le créer.
Mais qu'en est-il ici du ${voc}chemin absolu${reset} dont je vous ai parlé avant ?
En fait, un terminal tourne toujours dans un dossier, et peut se 'déplacer' dans l'arborescense du système.
C'est ce que vous avez fait avec la commande ${learn}cd House${reset}, vous avez déplacé votre terminal dans le dossier 'House'.
+Pour savoir dans quel répertoire votre terminal est en ce moment, il suffit de taper ${learn}pwd${reset} (pwd vient de l'anglais ${learn}P${reset}rint ${learn}W${reset}orking ${learn}D${reset}irectory).
!pwd£Non
Le résultat que vous voyiez ici est le ${voc}chemin absolu${reset} du répertoire ou vous êtes en ce moment.
Ce répertoire où vous êtes porte un nom spécial : c'est votre ${voc}${voc}répertoire courant${reset}.
Comme je vous l'ai déjà dit, il n'est pas obligatoire de mettre un '/' pour le dernier dossier, c'est pourquoi vous voyez ici ${learn}$(pwd)${reset} sans un '/' à la fin.
Voilà donc 4 commandes Unix fondamentales : ${learn}pwd${reset}, ${learn}ls${reset}, ${learn}cd${reset} et ${learn}mkdir${reset}.
${learn}pwd${reset} et ${learn}ls${reset} sont des commandes particulièrement innoffensives, elle ne font que vous donnez des renseignements.
N'hésitez donc pas à les taper systématiquement, dès que vous êtes dans un terminal.
${learn}pwd${reset}, pour savoir quel est votre ${voc}répertoire courant${reset}
et ${learn}ls${reset}, pour afficher le contenu de votre ${voc}répertoire courant${reset}.
+Maintenant créons un nouveau répertoire 'Room' dans notre ${voc}répertoire courant${reset} en faisant ${learn}mkdir Room${reset}.
!mkdir Room£Non
+Changeons de ${voc}répertoire courant${reset} avec ${learn}cd Room${reset}.
!cd Room£Non
+Maintenant, affichez le chemin absolu de votre ${voc}répertoire courant${reset}.
!pwd£Non
+Super, et maintenant affichez les éléments du ${voc}répertoire courant${reset}.
!ls£Non
Ici le dossier est vide, mais vous maitrisez maintenant les deux commandes les plus importantes : ${learn}pwd${reset} et ${learn}ls${reset}.
Les commandes ${learn}cd${reset} et ${learn}mkdir${reset} que nous avons vu ensemble sont plus complexes.
Il faut leur donner une cible, ou un nom comme par exemple : ${learn}mkdir Room${reset}.
Cette 'cible' est appelée un ${voc}argument${reset}!
Mais il est aussi possible d'avoir des commandes avec plusieurs ${voc}arguments${reset}.
Il suffit de continuer à les séparer par des espaces.
+On va créer les dossiers 'bed', 'closet' et 'desk' en une seule commande. Tapez donc la commande : ${learn}mkdir bed closet desk${reset}
!mkdir bed closet desk£Non
+Affichez les éléments du ${voc}répertoire courant${reset}.
!ls£Non
+Maintenant pour supprimer ces dossiers, vous pouvez taper : ${learn}rmdir bed closet desk${reset}. (rmdir vient de l'anglais ${learn}R${reset}e${learn}M${reset}ove ${learn}DIR${reset}ectory)
!rmdir bed closet desk£Non
${learn}rmdir${reset} est une commande plutôt innofensive, parce qu'elle refusera de supprimer un dossier si celui-ci n'est pas vide.
Ce qui peut empêcher de graves accidents. Si par exemple, vous faites par erreur ${learn}rmdir /home${reset}.
La commande ${learn}rm${reset} est la commande pour supprimer des fichiers. (rm vient de l'anglais ${learn}R${reset}e${learn}M${reset}ove)
#touch virus0 virus1 virus2 virus3 virus4
Tout comme ${learn}mkdir${reset}, il faudra lui donner en ${voc}argument${reset} le nom du fichier en question, par exemple : ${learn}rm test${reset}.
+Il vient de se passer quelque chose de bizarre... Affichez le contenu du ${voc}répertoire courant${reset}.
!ls£Non
+${code}rmdir${reset} a bien supprimé les dossiers. Mais ces fichiers n'ont rien à faire ici, supprimez le fichier 'virus0' avec ${learn}rm virus0${reset}
!rm virus0£Non
+Affichez à nouveau les éléments du ${voc}répertoire courant${reset}, pour voir s'il est toujours là.
!ls£Non
Super, virus0 n'existe plus.
Mais attention avec la commande ${learn}rm${reset}, c'est une commande dangereuse à ne pas utiliser à la légère.
Les fichiers sont supprimés directement, il ne vont pas dans une corbeille, donc soyez prudent.
Une erreur en ligne de commande ne pardonne pas.
Une faute de frappe ou un ${voc}répertoire courant${reset} innatendu peut avoir de graves conséquences.
Avant de lancer une commande, soyez donc sûrs de ce que vous faites.
N'hésitez jamais a lancer ou relancer ${learn}pwd${reset} et ${learn}ls${reset} pour savoir quel est votre ${voc}répertoire courant${reset} et vérifier son contenu.
Mais nous avons encore d'autres 'virus' à supprimer. Mais on peut aussi les supprimer d'une autre manière.
Nous pouvons utiliser son ${voc}chemin absolu${reset}.
#cd ~/
Lorsque vous avez tapé ${learn}rm virus0${reset}, vous avez demandé la suppression du fichier 'virus0' dans votre ${voc}répertoire courant${reset}.
+Je viens de changer votre ${voc}répertoire courant${reset}. Affichez le maintenant.
!pwd£Non
+Affichez le contenu de votre ${voc}répertoire courant${reset}.
!ls£Non
Le fichier 'virus1', existe toujours dans le répertoire 'Room', mais étant donné votre ${voc}répertoire courant${reset}, vous ne pouvez pas lancer ${learn}rm virus1${reset}.
Heureusement, vous connaissez le ${voc}chemin absolu${reset} du fichier 'virus1' : ${learn}$HOME/House/Room/virus1${Reset}
Vous pouvez utiliser son ${voc}chemin absolu${reset} comme ${voc}argument${reset}. Cette commande marchera donc quel que soit votre ${voc}répertoire courant${reset} !
+Supprimez le avec cette commande : ${learn}rm $HOME/House/Room/virus1${reset}.
!rm $HOME/House/Room/virus1£Non
Maintenant, comment pouvoir vérifier si le fichier a bien été supprimé ?
Lorsqu'une commande ne se passe pas comme prévue, elle vous renvoit très souvent une erreur.
+Essayez de supprimer le fichier 'virus1' à nouveau en utilisant son ${voc}chemin absolu${reset}.
!rm $HOME/House/Room/virus1£Non
Ici la commande ${learn}rm${reset} vous renvoit une erreur, le fichier n'existe donc déjà plus.
Maintenant, on peut aussi utiliser le ${voc}chemin absolu${reset} du dossier 'Room' pour afficher son contenu.
Vous connaissez déjà la commande ${learn}ls${reset}, pour lister le contenu du ${voc}répertoire courant${reset}.
Sans ${voc}argument${reset}, avec un simple ${learn}ls${reset}, le répertoire utilisé sera automatiquement le ${voc}répertoire courant${reset}.
Mais il est en fait aussi possible de donner un ${voc}argument${reset} à ${learn}ls${reset}.
Cet ${voc}argument${reset} représente le répertoire cible, par exemple ${learn}ls /${reset} affichera le contenu du ${voc}répertoire racine${reset}.
+Nous pouvons afficher le contenu du répertoire 'Room' sans se déplacer dans l'arborescence, avec cette commande : ${learn}ls $HOME/House/Room/${reset}.
!ls $HOME/House/Room/£Non
Excellent, le fichier 'virus1' n'existe plus.
Encore une fois, je vous rappelle que dans un ${voc}chemin absolu${reset}, si le dernier caractère est un '/', il n'est pas obligatoire.
+Donc ici le dernier '/' dans ${learn}$HOME/House/Room/${reset} n'est pas obligatoire. Testez donc à nouveau avec cette commande : ${learn}ls $HOME/House/Room${reset}
!ls $HOME/House/Room£Non
Pas de problème, le résultat est le même pour ces deux commandes : ${learn}ls $HOME/House/Room/${reset} et ${learn}ls $HOME/House/Room${reset}.
Quand vous avez fait ${learn}rm virus0${reset} pour la première suppression, vous avez utilisé ce que l'on appelle le ${voc}chemin relatif${reset}.
On dit que ce chemin est relatif parce qu'il dépend de votre ${voc}répertoire courant${reset}.
Imaginons deux fichiers 'virus' avec comme ${voc}chemin absolu${reset} : ${learn}/virus${reset} et ${learn}/bin/virus${reset}.
Si ${learn}pwd${reset} vous donne ${learn}$HOME${reset}. Un ${learn}rm virus${reset} ne supprimera aucun d'entre eux. Cette commande voudra supprimer le fichier avec ce chemin absolu : ${learn}$HOME/virus${reset}.
#cd "$HOME"
D'où la très grande utilité de ce ${voc}chemin absolu${reset}. Vous pouvez utiliser ${learn}rm /virus${reset} et ${learn}rm /bin/virus${reset} quel que soit votre ${voc}répertoire courant${reset}.
+Je viens de vous déplacer dans l'arborescence, affichez donc le chemin absolu du ${voc}répertoire courant${reset}.
!pwd£Non
Pour changer de ${voc}répertoire courant${reset}, vous pouvez utiliser la commande ${learn}cd${reset}.
Pour revenir dans le répertoire 'Room', vous pouvez utiliser son ${voc}chemin absolu${reset} : ${learn}cd $HOME/House/Room/${reset}
Mais il n'est pas obligatoire d'utiliser son ${voc}chemin absolu${reset}, il est aussi possible de revenir dans le répertoire 'Room' en utilisant son ${voc}chemin relatif${reset}.
Vous voulez aller dans ${learn}$HOME/House/Room/${reset} mais vous êtes déjà dans ${learn}$HOME${reset}.
+Il est donc possible de se déplacer de là où vous êtes avec un ${learn}cd House/Room/${reset}. Allez-y.
!cd House/Room/£Non
+Affichez maintenant les éléments de votre ${voc}répertoire courant${reset}.
!ls£Non
+Ici vous voyez encore des fichiers virus, supprimez le fichier virus2 en utilisant le ${voc}chemin relatif${reset}.
!rm virus2£Non
Excellent!
Nous avons vu dans l'exemple précédent que ${learn}cd House/Room/${reset} utilise un ${voc}chemin relatif${reset}, pourtant cette commande contient aussi des '/'.
Donc comment reconnaitre un ${voc}chemin absolu${reset} d'un ${voc}chemin relatif${reset} ?
Le ${voc}chemin absolu${reset} est en fait très facile à reconnaitre !
Il commence toujours à la racine, c'est à dire que le premier caractère d'un ${voc}chemin absolu${reset} est toujours un '/'.
Il y a aussi une syntaxe spéciale très utile pour le ${voc}chemin relatif${reset} : ${learn}..${reset}
${learn}..${reset} représente dans l'arborescence le parent du ${voc}répertoire courant${reset}.
C'est le vocabulaire que nous employons pour parler de cette arborescence, ce sont des relations parents / enfants.
Par exemple pour ${learn}/home/user/test/${reset}, le dossier parent de test est user. Le dossier parent de user est home.
Et bien évidemment test est un enfant de user, et user est un enfant de home.
Cibler les enfants en ${voc}argument${reset} avec un ${voc}chemin relatif${reset} est très simple, il suffit d'écrire le nom de leurs parents successifs.
Comme par exemple avec la commande de tout a l'heure : ${learn}cd House/Room/${reet}
Pour cibler les parents, c'est un peu plus compliqué. Il faut utiliser ${learn}..${reset}.
+Affichez donc le chemin absolu de votre ${voc}répertoire courant${reset}.
!pwd£Non
Vous connaissez aussi la commande pour changer de répertoire courant : ${learn}cd${reset}.
Ici nous allons nous déplacer dans le répertoire parent. Nous sommes dans ${learn}$HOME/House/Room/${reset} mais nous voulons aller dans ${learn}$HOME/House/${reset}
+Il est possible de remonter d'un cran dans l'arborescence, ou comme je viens de le dire de se déplacer dans le répertoire parent avec un ${learn}cd ..${reset}
!cd ..£Non
+Affichez le chemin absolu du ${voc}répertoire courant${reset}.
!pwd£Non
J'espère que le résultat de ${learn}pwd${reset} est logique pour vous.
+Mais il nous reste deux virus à supprimer, commençons par supprimer le fichier virus3 avec son ${voc}chemin relatif${reset}.
!rm Room/virus3£Non
+Bien ! Maintenant supprimons le fichier virus4 en utilisant son ${voc}chemin absolu${reset}.
!rm $HOME/House/Room/virus4£Non
Parfait, vous avez tout compris ! Et je vous donne rendez-vous au questionnaire !
#clean
