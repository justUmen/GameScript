#[ -d "$HOME/.GameScript_bash5" ] && echo "Erreur innatendu, ${HOME}/.GameScript_bash5 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_bash5 et relancer ce script." && exit
#mkdir $HOME/.GameScript_bash5 && mkdir -p $HOME/.GameScript/Audio/fr/bash/c5/ && wget -q -nc $AUDIO_DL/6.mp3 -O $HOME/.GameScript/Audio/fr/bash/c5/6.mp3 > /dev/null 2>&1
#cd $HOME/.GameScript_bash5
#mkdir Dossier;touch Dossier/X;touch Dossier/Y;chmod 644 Dossier
#echo "a">f1;chmod 000 f1;echo "ab">f2;chmod 444 f2;echo "abc">f3;chmod 400 f3;echo "abcd">f4;chmod 477 f4
Dans ce chapitre nous revenons sur la commande ${code}ls${reset}, l'une des commandes les plus importantes.
Et ici nous allons parler de son option la plus importante : ${code}-l${reset}
+Vous pouvez taper : ${learn}ls -l${reset}
!ls -l£Non
Avec cette option, ${code}ls${reset} nous donne plus d'informations sur les éléments du répertoire courant.
Vous avez au début une chaine de caractères étrange composé de ${code}-${reset} et de lettres à gauche du premier espace de chaque ligne.
Le premier caractère représente le type de l'élément.
Si c'est un ${code}-${reset}, cet élément est un fichier, si c'est un ${code}d${reset}, il s'agit d'un dossier.
Avec ce premier caractère, on voit clairement que 'Dossier' est un dossier et que les autres sont des fichiers.
Les neufs autres caractères qui suivent représentent les ${voc}permissions${reset} de l'élément en question.
Il est possible d'avoir plusieurs utilisateurs sur un même ordinateur.
Mais certains de vos fichiers méritent peut-être d'être protégés.
Par exemple, il semblerai raisonnable que votre petite soeur ne puisse pas supprimer vos fichier personnels.
En revanche, même si vous ne voulez pas qu'elle puisse supprimer vos fichiers, vous avez peut-être besoin de lui donner la permission de les lire.
Ces neufs caractères sont utilisés pour définir avec précision les permissions que vous désirez.
La permission 'minimale' est ${code}---------${reset} et la permission 'maximale' est ${code}rwxrwxrwx${reset}.
Chaque ${code}-${reset} veut dire que qu'un certain type de permission est ${voc}désactivé${reset}.
A l'inverse, lorsque vous voyez une lettre, c'est qu'un certain type de permission est ${voc}activé${reset}.
Mais chaque caractère doit respecter cet ordre : ${code}rwxrwxrwx${reset}.
C'est à dire qu'ils n'auront pour simplifier que deux états possibles.
Le premier caractère pourra être soit un ${code}-${reset} soit un ${code}r${reset}.
Ce ${code}r${reset} vient de l'anglais ${code}r${reset}ead et donne le droit de lecture.
Le second caractère pourra être soit un ${code}-${reset} soit un ${code}w${reset}.
Ce ${code}w${reset} vient de l'anglais ${code}W${reset}rite et donne le droit d'écriture : la modification ou la suppression.
Le troisième caractère pourra être soit un ${code}-${reset} soit un ${code}x${reset}.
Ce ${code}x${reset} vient de l'anglais e${code}X${reset}ecute et donne le droit d'exécution.
Et ce schéma de trois caractères ${code}rwx${reset} se répète trois fois.
Les trois premiers caractères sont les permissions du ${voc}propriétaire${reset} du fichier.
Exemple : -${codeFile}rw-${reset}r----- 2 ${codeFile}albert${reset} familleEinstein 4096 Feb 19 00:51 Exemple
Le nom du propriétaire du fichier 'Exemple' est ici 'albert'.
Les trois caractères en vert sont les permissions d'albert.
Exemple : -rw-${codeFile}r--${reset}--- 2 albert ${codeFile}familleEinstein${reset} 4096 Feb 19 00:51 Exemple
Ici les trois caractères en vert sont les permissions des membres du ${voc}groupe${reset} 'familleEinstein'.
Ici on peut imaginer l'existence d'un groupe 'familleEinstein' pour la famille Einstein.
Exemple : -rw-r--${codeFile}---${reset} 2 albert familleEinstein 4096 Feb 19 00:51 Exemple
Et enfin, les trois derniers caractères sont les permissions des autres utilisateurs.
Ceux qui ne sont ni albert, ni dans le groupe "familleEinstein".
Dans cet exemple, albert, le propriétaire du fichier a le droit de lecture avec ce ${code}r${reset} et le droit d'écriture avec ce ${code}w${reset}, mais pas le droit d'exécution car le troisième caractère n'est pas un ${codeError}x${reset} mais un ${code}-${reset}.
Les membres du groupe 'familleEinstein' ont uniquement le droit de lecture sur ce fichier avec ce ${code}r${reset}.
Ils n'ont pas le droit de le modifier ou de le supprimer, car il n'y a pas de ${code}w${reset} !
Le reste des utilisateurs n'ont aucune permission, car il n'y a pour eux aucune lettre : ${codeFile}---${reset}.
+Maintenant revenons à nos fichiers et relançons la commande ${learn}ls -l${reset}
!ls -l£Non
Sur un système simple, il est probable que vous ayez un nom de groupe similaire à votre nom d'utilisateur, mais ça n'est pas un problème.
Il y a donc de nombreuses combinaisons de permission possibles, ici nous avons 'f1' avec les permissions minimales : ${code}---------${reset}.
Nous avons 'f4' avec les permissions maximales : ${code}rwxrwxrwx${reset}.
Et nous avons d'autres combinaisons de permissions pour les autres éléments.
+Commençez par afficher le contenu du fichier 'f1'.
!cat f1£Non
Et oui, il n'est pas possible d'afficher le contenu de ce fichier, car vous n'avez pas le droit de lecture.
Pour pouvoir utiliser la commande ${code}cat${reset}, il vous aurez fallu un ${code}r${reset} à la place de ce tiret rouge : -${codeError}-${reset}--------.
+Sur le fichier 'f2', vous avez ce 'r' dans : -${code}r${reset}--r--r-- qui vous donne le droit de lecture. Affichez le contenu de 'f2'.
!cat f2£Non
Ici pas de problème à l'affichage.
+Ajoutez le texte 'cd' à la fin du fichier 'f2'.
!echo cd>>f2£Non
Sur 'f2' nous avons encore un problème de permission.
Cette fois c'est un ${code}w${reset} qui nous manque à la place de ce tiret rouge : -r${codeError}-${reset}-r--r--.
Mais 'f3' semble avoir à la fois le ${code}r${reset} et le ${code}w${reset}.
+Affichez les permissions de 'f3' avec le nom du fichier en argument : ${learn}ls -l f3${reset}.
!ls -l f3£Non
+Affichez le contenu de 'f3'.
!cat f3£Non
+Ajoutez 'def' au fichier 'f3'.
!echo def>>f3£Non
+Affichez le contenu de 'f3' a nouveau.
!cat f3£Non
Parfait ! Nous pouvons enfin utiliser les commandes que nous avons apprises.
Mais nous n'avons jamais eu ce problème de permission dans les chapitres précédents...
Je viens ici en fait de les simuler pour vous...
Vous savez déjà créer un fichier texte avec ${code}echo${reset}.
+Mais vous pouvez aussi utiliser la commande ${code}touch${reset}, faites donc : ${learn}touch file${reset}
!touch file£Non
Maintenant nous pouvons voir les permissions par défaut lors de la création d'un nouveau fichier.
+Pour avoir les permissions de 'file', faites ${learn}ls -l file${reset}
!ls -l file£Non
Si le fichier a été créé par vous, vous aurez par défaut le droit de lecture et d'écriture.
Attention par contre si ce fichier ne vient pas de vous, il peut avoir des permissions limités ou inattendues.
Nous pouvons voir ici le nom du propriétaire du fichier, mais est-ce bien vous ?
+Pour connaitre votre nom d'utilisateur, vous pouvez taper : ${learn}whoami${reset}
!whoami£Non
'Who am I ?' est l'anglais pour 'Qui suis-je ?'.
Ici votre nom correspond effectivement au nom du propriétaire de ce fichier.
Mais il existe sur votre machine au moins un autre utilisateur !
Cet utilisateur possède les droits de vie ou de mort de tout ce qui existe dans votre système...
Il s'agit de votre compte administrateur, plus connu sous le nom de ${voc}root${reset}.
Traditionnelement, vos fichiers personnels doivent être stockés dans : /home/votrenom
Et vous devriez être maitre de tout ce qu'il se passe à l'intérieur.
Mais en tant que simple utilisateur, vous ne pouvez contrôler que les éléments de ce répertoire !
+Essayez donc d'afficher les permissions d'un autre dossier, le répertoire racine par exemple : ${learn}ls -l /${reset}
!ls -l /£Non
Ici nous voyons bien que le propriétaire de ces éléments est ${voc}root${reset}.
Vous n'êtes pas ${voc}root${reset}, les trois premiers caractères de permissions ne vous concernent donc pas. : d${codeError}rwx${reset}r-xr-x
Vous ne faites également pas partie du groupe en question : drwx${codeError}r-x${reset}r-x
Les permissions qui vous concernent sont les trois dernières : drwxr-x${codeFile}r-x${reset} 
Vous avez donc les droits de lecture ${codeFile}r${reset} et d'exécution ${codeFile}x${reset}.
Mais qu'en est-il de cette permission ${voc}d'exécution${reset} ?
+Affichons à nouveau les permissions des éléments du répertoire courant.
!ls -l£Non
Ici nous avons un dossier avec le droit de lecture et d'écriture.
+Rentrons dans ce dossier.
!cd Dossier£Non
Ici, malgré avoir le droit de lecture sur ce dossier, nous ne pouvons pas nous déplacer dedans.
Pour un fichier texte, les permissions ${codeFile}x${reset} n'ont aucun effet...
Mais ici avec un ${voc}dossier${reset}, le ${codeFile}x${reset} joue un rôle important !
Etrangement, nous avons le droit de lecture avec ce d${codeFile}r${reset}w-r--r--
+Donc nous pouvons afficher les éléments de ce dossier, faites le donc.
!ls Dossier£Non
Le contenu de 'Dossier' s'affiche. Il contient un fichier 'X' et un fichier 'Y'.
+Affichons maintenant les permissions des fichiers dans ce dossier.
!ls -l Dossier£Non
Ici l'absence de ${codeFile}x${reset} dans les permissions de 'Dossier' nous empêche d'accéder aux détails.
Attention donc à ces permissions !
Si quelque chose ne se passe pas comme prévu, il se peut que vous ayez simplement un problème de permission à régler.
C'est ce que nous allons voir maintenant : Comment changer ces permissions ?
Donc en premier lieu il faut que vous soyiez capable d'identifier la permission qu'il vous manque !
La commande ${code}cat${reset} par exemple a besoin d'une permission de lecture : ${codeFile}r${reset}.
Le fichier 'f1' ne nous donne pas cette permission pour l'afficher.
Pour changer ces permissions il faudra utiliser la commande : ${code}chmod${reset}.
Il faudra d'abord mémoriser 3 nouvelles lettres :
${code}u${reset} pour l'${code}u${reset}tilisateur ou le propriétaire : -${codeFile}rwx${reset}rwxrwx
${code}g${reset} pour le ${code}g${reset}roupe : -rwx${codeFile}rwx${reset}rwx
et ${code}o${reset} pour '${code}o${reset}thers', l'anglais de 'autres' : -rwxrwx${codeFile}rwx${reset}
Vous pouvez ensuite utilisez ces lettres en conjonction avec les lettres 'r', 'w' et 'x' que vous connaissez déjà.
Vous devez également utiliser les symboles ${code}+${reset} et ${code}-${reset}, pour ajouter ou supprimer une permission.
+Relancez : ${learn}ls -l${reset}
!ls -l£Non
Et prenons un exemple : Comment pouvoir nous autoriser l'affichage de 'f1' ?
Autrement dit : transformer ---------- en -r--------.
D'abord nous voulons changer les permissions du propriétaire, il faudra donc utiliser la lettre ${code}u${reset}.
Nous voulons ajouter une permission, il faudra donc utiliser le symbole ${code}+${reset}.
Nous voulons le droit de lecture, il faudra donc bien sûr utiliser la lettre ${code}r${reset}.
Et la cible de chmod sera le fichier 'f1'.
La syntaxe sera donc la suivante : ${learn}chmod u+r f1${reset}
+Avant de lancer cette commande, essayez donc d'afficher le contenu de 'f1'.
!cat f1£Non
+Ajoutons donc le droit de lecture à 'f1' pour le propriétaire avec : ${learn}chmod u+r f1${reset}
!chmod u+r f1£Non
+Relancez : ${learn}ls -l${reset}
!ls -l£Non
Ici nous avons bien : -r-------- pour le fichier 'f1'.
+Et enfin, affichez le fichier 'f1'.
!cat f1£Non
Vous pouvez donc utiliser toutes les combinaisons que vous voulez : ${learn}u+r${reset}, ${learn}g-w${reset}, ${learn}u+x${reset}, etc...
Mais vous pouvez aussi les cumuler avec d'autres, comme par exemple pour donner au propriétaire le droit de lecture ET d'écriture, vous pouvez faire : ${learn}u+rw${reset}.
Pour enlever aux membres du groupe et aux autres le droit d'écriture, vous pouvez faire : ${learn}go-w${reset}
Ou encore pour donner tous les droits à tout le monde, vous pouvez faire : ${learn}ugo+rwx${reset}.
Ou enlever tous les droits de tout le monde avec ${learn}ugo-rwx${reset}.
Avant de passer au questionnaire je vous rappelle que le droit d'écriture donne le droit de ${voc}suppression${reset}.
Bonne chance !
#clean
