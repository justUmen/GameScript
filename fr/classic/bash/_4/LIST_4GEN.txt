#[ -d "$HOME/.GameScript_bash4" ] && echo "Erreur innatendu, ${HOME}/.GameScript_bash4 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_bash4 et relancer ce script." && exit
#mkdir $HOME/.GameScript_bash4 2> /dev/null
#cd $HOME/.GameScript_bash4
Dans le chapitre précédent, nous avons vu comment créer et modifier les fichiers textes.
Ici nous allons continuer avec d'autres types de contrôles.
+Commençons par créer un nouveau fichier 'test' avec comme contenu le mot 'bonjour'.
!echo bonjour>test£Non
+Créez un nouveau dossier nommé 'DIR'.
!mkdir DIR£Non
+Affichez les éléments du répertoire courant.
!ls£Non
Pour déplacer un fichier il faudra utiliser la commande ${code}mv${reset}.
'm' et 'v' sont les consonnes de 'move', le mot anglais pour 'déplacer'.
+Déplacez donc ce fichier 'test' dans le dossier DIR avec la commande : ${learn}mv test DIR${reset}
!mv test DIR£Non
+Affichez les éléments du dossier 'DIR'.
!ls DIR£Non
+Déplacez votre terminal dans le dossier 'DIR'.
!cd DIR£Non
+Affichez le chemin absolu du répertoire courant.
!pwd£Non
+Affichez les éléments du répertoire courant.
!ls£Non
Ici le fichier 'test' a bien été déplacé dans le répertoire 'DIR' avec cette commande : ${learn}mv test DIR${reset}
Dans cet exemple, notre premier argument est un fichier et le second est un dossier.
Comme le deuxième argument est un dossier, la commande aurait pu être : ${learn}mv test DIR/${reset}
Cette version est nettement plus lisible que la première.
Parce que ${code}mv${reset} peut avoir indifféremment en arguments des fichiers ou des dossiers.
Mais si le premier argument est un fichier et que le deuxième n'est pas un dossier, la commande agira différemment : cette fois le premier argument sera ${voc}renommé${reset}.
Attention donc à bien comprendre votre environnement.
Dans votre répertoire courant vous avez toujours ce fichier 'test'.
+Utilisez cette commande pour renommer 'test' en 'test2' : ${learn}mv test test2${reset}
!mv test test2£Non
+Affichez les éléments du répertoire courant.
!ls£Non
+Affichez le contenu du fichier 'test2'.
!cat test2£Non
Le contenu est bien toujours le même, seul le nom du fichier à changé.
+Maintenant créez un nouveau dossier nommé : 'DOS'.
!mkdir DOS£Non
Je le répète, ${code}mv${reset} peut avoir indifféremment en arguments des fichiers ou des dossiers.
C'est à dire que si le premier argument est un dossier, et que le second n'existe pas, ${code}mv${reset} va encore une fois simplement renommer le dossier en argument.
+Renommez donc ce dossier 'DOS' en 'DOS2'.
!mv DOS DOS2£Non
+Et affichez les éléments du répertoire courant.
!ls£Non
Attention donc à la commande ${code}mv${reset} qui peut avoir deux rôles différents : déplacer et renommer.
${code}mv${reset} peut également faire les deux en une seule commande.
+Déplacez 'test2' dans le dossier 'DOS2' et renommez le en 'test3' avec : ${learn}mv test2 DOS2/test3${reset}
!mv test2 DOS2/test3£Non
+Affichez les éléments du répertoire DOS2.
!ls DOS2£Non
Le fichier 'test2' a bien été déplacé dans DOS2 et renommé en 'test3'.
+Affichez le contenu de ce fichier 'test3'.
!cat DOS2/test3£Non
Le contenu est toujours identique.
Si vous ajoutez le texte 'tout le monde' à la suite de ce fichier, le texte sera ajouté sur une nouvelle ligne.
Parce que lorsque vous utilisez ${code}echo${reset}, il ajoutera par défaut une mise à la ligne à la fin.
Si vous ne voulez pas de cette mise à la ligne, il faudra utiliser l'option ${learn}-n${reset} de la commande ${code}echo${reset}.
+Remplacez donc le contenu du fichier 'test3' par 'bonjour', mais sans ce retour à la ligne automatique à la fin.
!echo -n bonjour>DOS2/test3£Non
+Maintenant ajoutez le texte ' tout le monde' à ce fichier 'test3', en utisant ${learn}\\"${reset}.
!echo \\" tout le monde\\">>DOS2/test3£Non
+Et enfin, affichez le contenu de 'test3'.
!cat DOS2/test3£Non
Et voilà, bonjour tout le monde !
Quand une commande ne fait pas exactement ce que voulez qu'elle fasse, visitez son manuel !
Il est très probable qu'une simple option soit la réponse à votre problème.
${code}mv${reset} utilise deux arguments, le premier est la ${voc}<SOURCE>${reset} et le deuxième est la ${voc}<DESTINATION>${reset}.
Et la syntaxe comme on l'a déjà vu est : ${code}mv <SOURCE> <DESTINATION>${reset}
${voc}<SOURCE>${reset} et ${voc}<DESTINATION>${reset} sont à remplacer par les fichiers ou les dossiers voulus.
Lorsqu'une commande a besoin de deux arguments, la plupart du temps cette logique s'applique.
Le premier argument est la ${voc}source${reset}, le second est la ${voc}destination${reset}.
Pour ${voc}copier${reset} ou ${voc}dupliquer${reset} un fichier, il faudra utiliser la commande ${code}cp${reset}.
Son comportement est sensiblement identique à ${code}mv${reset}, sauf que le fichier ${voc}<SOURCE>${reset} ne sera pas supprimé.
+Affichez les éléments du répertoire courant.
!ls£Non
+Copiez donc le fichier 'test3' dans votre répertoire courant.
!cp DOS2/test3 .£Non
Et ici nous avons notre première utilisation pratique du ${code}.${reset}, qui je vous le rappelle représente le répertoire courant.
+Listez à nouveau les éléments du répertoire courant.
!ls£Non
Encore une fois ${code}.${reset} étant un dossier, vous pouvez également utiliser ${code}./${reset} à la place.
+Maintenant testez cette commande : ${learn}cp DOS2/test3 .new${reset}
!cp DOS2/test3 .new£Non
+Puis listez les éléments du répertoire courant.
!ls£Non
Ce résultat ne devrait pas vous choquer.
Encore une fois, ${code}.new${reset} et ${code}./new${reset} représentent deux choses différentes.
${code}.new${reset} est bien évidemment un fichier caché.
+Listez les fichiers cachés du répertoire courant.
!ls -a£Non
Si vous voulez copier le fichier 'test3' et renommer cette copie en 'new' dans le répertoire courant, la commande serait : ${learn}cp DOS2/test3 ./new${reset}.
Ici la commande ${learn}cp DOS2/test3 .new${reset} est identique à ${learn}cp DOS2/test3 ./.new${reset}.
Il est aussi possible d'avoir plusieures commandes sur une seule ligne, il suffit de les séparer par des ${code};${reset}.
+Essayez donc d'afficher 'a', puis sur une autre ligne 'b'. Avec deux commandes et un ${code};${reset}.
!echo a;echo b£Non
+Maintenant, essayez de vous déplacer dans le dossier DOS et de créer un dossier NEW à l'intérieur.
!cd DOS;mkdir NEW£Non
+Listez les éléments de votre répertoire courant.
!ls£Non
Avec ${code};${reset}, quel que soit le résultat de la première commande, la deuxième se lancera.
Ici le dossier 'DOS' n'existait pas, pourtant la commande ${learn}mkdir NEW${reset} a été lancée dans ${code}.${reset}.
Le ${code};${reset} ne donne aucun contrôle sur l'état des commandes précédentes.
Mais vous pouvez aussi créer des conditions avant de passer à la prochaine commande.
Si vous voulez que la deuxième commande s'exécute uniquement si la première a été un succès, vous pouvez utiliser ${code}&&${reset} à la place du ${code};${reset}.
+Commencez par supprimer ce dossier NEW, que nous avons créé par erreur dans le mauvais répertoire.
!rmdir NEW£Non
+Maintenant, pour créer un dossier NEW dans DOS, essayez : ${learn}cd DOS&&mkdir NEW${reset}
!cd DOS&&mkdir NEW£Non
+Listez les éléments de votre répertoire courant.
!ls£Non
La commande ${learn}cd DOS${reset} renvoyant une erreur, ${code}&&${reset} a bloqué le lancement de la prochaine commande.
Cette technique est particulièrement importante si vous utilisez des commandes ${voc}destructrices${reset}, comme ${code}rm${reset}, ou ${code}echo${reset} avec le ${code}>${reset}.
Si vous ne prenez pas de précaution, vous risquez de supprimer accidentellement un fichier important.
Il est possible d'utiliser ${code};${reset} et ${code}&&${reset} avec toutes les commandes que vous connaissez déjà.
Mais il existe une autre syntaxe : ${code}||${reset}, qui fait l'inverse de ${code}&&${reset}.
C'est à dire que la prochaine commande ne se lancera que si la précédente est un échec.
+Essayez donc avec une faute de frappe la commande : ${learn}lss||echo test${reset}
!lss||echo test£Non
+Essayez la même commande, cette fois avec ${code}&&${reset} : ${learn}lss&&echo test${reset}
!lss&&echo test£Non
Mais il est aussi possible d'avoir les deux conditions sur une seule ligne.
+Essayez cette commande : ${learn}cd DOS&&echo SUCCESS||echo ERROR${reset}
!cd DOS&&echo SUCCESS||echo ERROR£Non
Si vous savez déjà programmer, cette commande peut être vu comme une condition de programmation if/else.
+Ici le dossier 'DOS' n'existe pas, utilisez donc DOS2 avec cette commande : ${learn}cd DOS2&&ls||pwd${reset}
!cd DOS2&&ls||pwd£Non
Comme le dossier 'DOS2' existe, la commande ${learn}pwd${reset}, ne sera pas exécutée.
Vous êtes prêt pour le questionnaire !
#clean
