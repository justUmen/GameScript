#[ -d "$HOME/.GameScript_bash2" ] && echo "Erreur inattendue, ${HOME}/.GameScript_bash2 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_bash2 et relancez ce script." && exit
#mkdir $HOME/.GameScript_bash2 2> /dev/null
#cd $HOME/.GameScript_bash2
#touch $HOME/.GameScript_bash2/bOb
Dans le dernier cours, nous avons vu l'utilisation de certaines commandes et de leurs arguments.
La commande ${learn}cd${reset} nous permet par exemple de nous déplacer dans le répertoire de notre choix.
Mais nous devons donner notre choix en ${voc}argument${reset} de cette commande, par exemple ${learn}cd test${reset} pour se déplacer dans le dossier 'test'.
Ou encore ${learn}mkdir test${reset} pour créer un répertoire qui portera le nom 'test'.
La syntaxe est donc : ${voc}<COMMANDE> <ARGUMENT>${reset}.
Cet ${voc}<ARGUMENT>${reset} peut être un ${voc}chemin relatif${reset}, comme un dossier dans le ${voc}répertoire courant${reset} avec par exemple : ${learn}mkdir NouveauDossier${reset}
Cet ${voc}<ARGUMENT>${reset} peut aussi être un ${voc}chemin absolu${reset}, comme un fichier dans le ${voc}répertoire racine${reset} avec par exemple : ${learn}rm /fichier${reset}
Mais vous souvenez-vous des commandes que nous avons déjà vu ?
+Essayez d'afficher les éléments de de votre répertoire courant.
!ls£Non
+Maintenant affichez le contenu de votre répertoire parent.
!ls ..£Non
${code}..${reset} étant l'abréviation d'un répertoire, il peut donc également s'écrire ${code}../${reset}
+Testez donc : ${learn}ls ../${reset}
!ls ../£Non
Le résultat de ${learn}ls ../${reset} est équivalent au résultat de la commande précédente : ${learn}ls ..${reset}
${code}..${reset} étant un répertoire, il peut aussi avoir un parent, qui peut être ciblé par ${code}../..${reset} ou encore ${code}../../${reset}.
${code}../..${reset} cible donc le grand parent du répertoire courant.
${code}../../..${reset} cible son arrière grand parent, et ainsi de suite.
Mais il existe un autre nom spécial, qui représente le répertoire courant : c'est le ${code}.${reset}.
Comme il s'agit d'un dossier, ${code}./${reset} est aussi une syntaxe correcte.
On a déjà vu que ${code}ls${reset} pouvait avoir un argument, comme ${learn}ls /${reset}.
+Donnons le repertoire courant en argument à ${code}ls${reset} avec : ${learn}ls .${reset}
!ls .£Non
+Et maintenant faites ${learn}ls ./${reset}
!ls ./£Non
Ces deux commandes donnent le même résultat qu'un simple ${learn}ls${reset}.
Sans argument, la commande ${learn}ls${reset} cible par défaut le répertoire ${code}.${reset}.
+Pour supprimer ce fichier 'bOb', vous pouvez donc par exemple taper ${learn}rm ./bOb${reset}, allez-y.
!rm ./bOb£Non
Il n'y a pas de message d'erreur, cela veut donc dire que la commande a bien fonctionnée.
+Vérifions néanmoins le contenu du répertoire courant.
!ls£Non
+Parfait, il n'existe plus. Affichez maintenant le chemin du répertoire courant.
!pwd£Non
Attention à ce symbole ${code}.${reset}, ici il a une autre signification.
Ce '.' dans '.GameScript_bash2' ne fait pas du tout référence au répertoire courant, ce '.' fait simplement partie du nom du dossier.
Le nom complet du dossier est '.GameScript_bash2'.
+Maintenant créez un nouveau dossier 'enfant' dans le répertoire courant.
!mkdir enfant£Non
+Déplacez vous dans ce dossier 'enfant' que vous venez de créer.
!cd enfant£Non
+Affichez le chemin du répertoire courant.
!pwd£Non
+Maintenant déplacez vous dans votre répertoire grand parent en utilisant son chemin relatif.
!cd ../..£Non
+Réaffichez le chemin du répertoire courant.
!pwd£Non
Vous êtes maintenant dans le répertoire où se trouve le dossier '.GameScript_bash2'.
Mais si vous tentez d'afficher les éléments de votre répertoire courant, vous ne le verrez pas.
+Essayez donc de l'afficher avec : ${learn}ls${reset}.
!ls£Non
Sur un système d'exploitation de type Unix, comme Linux, si un nom de fichier ou un nom de dossier commence par un ${code}.${reset}, cet élément sera ${voc}caché${reset}.
Ici il n'est pas dans l'affichage de la commande ${learn}ls${reset}, pourtant il existe bel et bien.
Mais comment pouvez vous afficher le dossier caché '.GameScript_bash2' ?
La plupart des commandes peuvent avoir des arguments spéciaux, qui donnent plus de détails à cette commande.
Ces arguments spéciaux commence par un ${code}-${reset} et se nomment ${voc}options${reset}.
+Pour que ${learn}ls${reset} affiche également les éléments ${voc}cachés${reset}, il vous faudra faire ${learn}ls -a${reset}, allez-y.
!ls -a£Non
Ici vous devriez pourvoir voir le dossier ${code}.GameScript_bash2${reset}, mais aussi beaucoup d'autres éléments ${voc}cachés${reset}.
Traditionnelement, ces ${voc}options${reset} sont placés avant les arguments normaux.
La syntaxe sera donc ${voc}<COMMANDE> <OPTION> <ARGUMENT_NORMAL>${reset} comme par exemple ${learn}ls -a /${reset}.
Maintenant comment revenir dans ce dossier ${code}.GameScript_bash2${reset} ?
Il est possible de revenir dans ce dossier avec un simple ${learn}cd .GameScript_bash2${reset}.
+Mais il est aussi possible de se déplacer dans ce répertoire avec : ${learn}cd ./.GameScript_bash2${reset}, essayez donc cette commande.
!cd ./.GameScript_bash2£Non
J'espère que la différence entre ces deux ${code}.${reset} dans cette commande est pour vous évidente.
${code}.${reset}/.GameScript_bash2 : Ce '.' représente le répertoire courant.
./${code}.${reset}GameScript_bash2 : Ce '.' fait de ce dossier un dossier caché.
+Réaffichez les éléments et les éléments ${voc}cachés${reset} de votre nouveau répertoire courant.
!ls -a£Non
Vous pouvez voir ici les deux références spéciales que l'on vient de voir : ${code}.${reset} et ${code}..${reset}
Ces deux dossiers cachés, ${code}.${reset} et ${code}..${reset}, sont présents dans tous les dossiers.
Puisque l'on parle de répertoire avec symbole spéciaux, nous pouvons aussi parler du ${code}~${reset}.
Le ${code}~${reset} représente le ${voc}répertoire personnel${reset} de l'utilisateur.
Le plus souvent ce répertoire porte le nom de l'utilisateur dans le dossier ${code}/home/${reset}.
Dans votre cas, ${code}~${reset} remplace ce chemin : ${code}$HOME${reset}.
Vous pouvez bien évidemment utiliser ce ${code}~${reset} en argument avec vos commandes.
+Déplacez vous donc dans ce répertoire avec ${learn}cd ~${reset}
!cd ~£Non
+Vérifiez maintenant votre nouveau répertoire courant.
!pwd£Non
${code}~${reset} remplace dans votre cas ce chemin absolu : ${code}$HOME${reset}
Pour cibler '.GameScript_bash2', vous pouvez donc utiliser comme chemin relatif ${code}.GameScript_bash2${reset} ou ${code}./.GameScript_bash2${reset}
Mais vous pouvez également, grâce à ${code}~${reset}, utiliser un nouveau chemin absolu : ${code}~/.GameScript_bash2${reset}
+Supprimez le dossier 'enfant' que vous avez créé dans '.GameScript_bash2' en utilisant son chemin relatif.
!rmdir .GameScript_bash2/enfant£Non
+Déplacez vous maintenant dans le répertoire racine.
!cd /£Non
+Maintenant supprimez le dossier ${code}.GameScript_bash2${reset} en utilisant son chemin absolu et le symbole ${code}~${reset} !
!rmdir ~/.GameScript_bash2£Non
Parfait !
Maintenant revenons sur les commandes et plus précisement sur leurs ${voc}options${reset}.
+Listez tous les éléments du répertoire courant avec ${learn}ls -a${reset}.
!ls -a£Non
Certaines ${voc}options${reset} ont aussi une version longue, parfois plus facile à mémoriser, qui commence elle par ${code}--${reset}.
Par exemple vous pouvez remplacer ${code}-a${reset} par ${code}--all${reset}.
+Listez tous les éléments de ${code}$HOME${reset} avec ${learn}ls --all $HOME${reset}.
!ls --all $HOME£Non
Les commandes ${code}ls -a${reset} et ${code}ls --all${reset} sont identiques !
Mais comment pouvoir retenir toutes les options de toutes les commandes ?
En fait vous n'avez pas besoin de les mémoriser !
Vous pouvez toujours accéder au ${voc}manuel${reset} d'une commande avec la commande ${learn}man${reset}.
Pour quitter le manuel, appuyez sur la touche 'q' de votre clavier, comme ${voc}q${reset}uitter.
+Ouvrez le manuel de la commande ls avec ${learn}man ls${reset}, survoler rapidement son contenu, et enfin quitter avec la touche 'q'.
!man ls£Non
Si vous avez oublié certaines options d'une commande, vous pouvez toujours ouvrir son manuel.
Si vous posez une question sur internet à propos d'une commande, mais que la réponse est dans le manuel, il est possible que vous ayez la réponse : RTFM.
C'est un acronyme anglais pour 'Read The Fucking Manual' ou 'Lit le Putain de Manuel'.
Apprendre à lire les manuels est indispensable pour pouvoir vous débrouiller seul face à des problèmes simples.
Avec la répétition vous devriez vous souvenir des options les plus importantes, mais ayez toujours le réflexe de visiter le manuel avant de demander de l'aide. Le manuel sera toujours là pour vous.
+Faites le donc pour ${code}rmdir${reset}, regardez rapidement les options disponibles dans le manuel et quittez avec la touche 'q' : ${learn}man rmdir${reset}
!man rmdir£Non
La plupart des commandes ont une option ${code}--help${reset}, qui affiche l'aide de la commande. Il s'agit parfois simplement du contenu du manuel.
+Affichez l'aide de rmdir avec ${learn}rmdir --help${reset}
!rmdir --help£Non
Excellent, maintenant voyons d'autres options.
+D'abord déplacez vous dans votre répertoire racine avec la commande ${learn}cd /${reset}
!cd /£Non
+Affichez les éléments du répertoire courant.
!ls£Non
${learn}ls${reset} utilise par défaut toute la longueur du terminal pour l'affichage.
Mais il est possible de limiter sa longueur avec l'option ${code}-w${reset}.
+Ouvrez le manuel de ${code}ls${reset}, lisez les détails de l'option ${code}-w${reset} et quittez le manuel.
!man ls£Non
Certaines options, comme ici ${code}-w${reset}, doivent aussi avoir des valeurs.
Pour utiliser l'option ${code}-w${reset}, il faudra lui donner une valeur numérique qui correspondra au nombre de caractère par ligne.
Si vous limitez cette valeur par exemple à 1, vous pouvez être sûr qu'il y aura qu'un seul nom de fichier par ligne.
+Essayez donc cette commande : ${learn}ls -w 1${reset}
!ls -w 1£Non
+Essayez maintenant 100 comme limite avec : ${learn}ls -w 100${reset}
!ls -w 100£Non
La version longue des options avec valeur est parfois différente, avec l'utilisation du signe ${code}=${reset} au lieu d'un espace.
+Essayez d'utiliser la version longue avec ${learn}ls --width=100${reset}
!ls --width=100£Non
Encore une fois, il n'est pas nécessaire d'apprendre par coeur toutes les options disponibles.
Il faudra surtout apprendre à utiliser ${code}man${reset}.
Vous êtes prêt pour le questionnaire ! Allez vérifier vos connaissances !
#clean
