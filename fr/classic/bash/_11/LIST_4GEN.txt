#[ -d "$HOME/.GameScript_bash11" ] && echo "Erreur innatendu, ${HOME}/.GameScript_bash11 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_bash11 et relancer ce script." && exit
#mkdir $HOME/.GameScript_bash11 2> /dev/null
#cd $HOME/.GameScript_bash11
#echo -e 'echo -n void=\\nread void\\necho $void' > $HOME/.GameScript_bash11/CODE;echo -e 'read X;if [ $X -eq 1 ];then echo COURS;else echo QUESTIONNAIRE;fi' > $HOME/.GameScript_bash11/if1;echo -e 'read X\\nif\\n[ $X -eq 1 ]\\nthen\\necho COURS\\nelse\\necho QUESTIONNAIRE\\nfi' > $HOME/.GameScript_bash11/if2;echo -e 'read X\\nif [ $X -eq 1 ]\\nthen\\n\\techo COURS\\nelse\\n\\techo QUESTIONNAIRE\\nfi' > $HOME/.GameScript_bash11/if3;echo -e 'read X\\nif [ $X -eq 1 ]\\nthen\\n\\techo COURS\\nfi\\necho TEXTE' > $HOME/.GameScript_bash11/if4;echo -e 'read X\\n[ $X -eq 1 ]&&echo COURS||echo QUESTIONNAIRE' > $HOME/.GameScript_bash11/if5;echo -e 'X=11;if [ $X -gt 5 ];then echo h;if [ $X -lt 10 ];then echo o;if [ $X -eq 8 ];then echo i;else echo f;fi else echo e;if [ $X -lt 11 ];then echo o;else echo y;fi fi else if [ $X -lt 3 ];then echo o;if [ $X -eq 1 ];then echo l;else echo u;fi else echo x;fi fi' > $HOME/.GameScript_bash11/if6;echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi' > $HOME/.GameScript_bash11/if7;echo -e 'X=7\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi' > $HOME/.GameScript_bash11/if8
Avec 'bash', il par exemple possible de demander une valeur à l'utilisateur, pour donner à votre script une certaine interactivité.
Pour cela il faudra utiliser la commande ${code}read${reset}, qui prendra en argument le nom de la variable où sera stocké la valeur donnée.
Pour demander la valeur de la variable NAME à l'utilisateur, il suffira de faire ${learn}read NAME${reset} (l'anglais de lire)
${code}read${reset} attendra qu'une valeur soit donnée et que la touche Entrée soit pressée pour continuer.
+Essayez donc de demander la valeur de la variable 'NAME' avec ${learn}read NAME${reset}, donnez lui une valeur quelconque, puis validez avec la touche entrée.
!read NAME£Non
+Affichez maintenant la valeur de la variable 'NAME'.
!echo \\$NAME£Non
Nous avons déjà vu que pour créer un script bash, il suffisait d'écrire les commandes que vous voulez exécuter dans un fichier texte.
Les commandes seront alors lancés les unes après les autres lorsque vous donnez ce fichier en argument à la commande 'bash'.
Si la commande ${code}read${reset} est utilisée dans un script, elle mettra ce script en pause tant qu'elle n'aura pas reçu une valeur pour sa variable.
+Affichez donc le contenu du fichier 'CODE'.
!cat CODE£Non
+Faites maintenant : ${learn}bash CODE${reset}, il vous faudra donner une valeur à 'void' pour continuer.
!bash CODE£Non
Ici vous voyez bien que la première commande ${learn}echo -n void=${reset} se lance avant la commande read, mais que la deuxième commande ${learn}echo \\$void${reset} attendra la fin de la commande ${code}read${reset} avant de se lancer.
A chaque fois que GameScript vous demande de taper quelque chose après ce \\e[97;45m # \\e[0m, c'est en fait cette commande ${code}read${reset} qui est utilisée !
Mais Bash est aussi capable de créer des scripts plus complexes qu'une simple succession de commande.
Par exemple, lorque Gamescript vous demande de taper quelque chose, il vérifie si le contenu que vous avez tapé correspond à la commande qui vous a été demandé.
Si vous faites une erreur ou une faute de frappe, GameScript ne vous laissera pas continuer.
Pour avoir cet effet, un script bash utilise des ${voc}conditions${reset}, avec une combinaison de plusieurs commandes : ${code}if${reset}, ${code}then${reset}, ${code}else${reset} et ${code}fi${reset}.
Avec ces ${voc}conditions${reset}, il est possible de contrôler avec précision le comportement de votre script.
GameScript utilise régulièrement cette combinaison ${code}if{reset}/${code}then{reset}/${code}else{reset}/${code}fi${reset} pour décider quelles commandes doivent être lancées et quelles commandes ne doivent pas l'être.
+Voyons notre premier exemple, affichez le contenu du fichier 'if1'.
!cat if1£Non
Ici nous avons un exemple de l'utilisation de la commande ${code}if${reset} (l'anglais du mot 'si') en combinaison avec ${code}else${reset} (l'anglais de 'sinon').
Ce script demandera à l'utilisateur la valeur de la variable 'X', si cette valeur est 1, le script affichera 'COURS', si cette valeur n'est pas 1, le script affichera 'QUESTIONNAIRE'.
Ce mot clef ${code}if${reset} annonce l'ouverture d'une condition, qui devra avoir le ${voc}test logique${reset} voulu en argument.
Il faudra ensuite utiliser le mot clef ${code}then${reset}, pour définir l'emplacement du début du code à exécuter si cette condition est valide.
Cette condition commence à ${code}if${reset} mais vous devez également définir où elle se termine en utilisant le mot clef ${code}fi${reset}.
Vous pouvez lire cette combinaison ${code}if${reset}/${code}then${reset}/${code}else${reset}/${code}fi${reset} comme 'si/faire/sinon faire/fin'.
Le code ${code}[ \\$X -eq 1 ]${reset} est un ${voc}test logique${reset} que vous pouvez lire comme 'X est égal à 1'.
Finalement vous pouvez lire le code ${learn}if [ \\$X -eq 1 ];then echo COURS;else echo QUESTIONNAIRE;fi${reset} comme : 'si X est égal à 1, faire afficher COURS, sinon faire afficher QUESTIONNAIRE, fin du si'.
Comme d'habitude, les ${code};${reset} peuvent être remplacées par des mises à la lignes, mais attention car tous les espaces que vous voyez dans cet exemple sont indispensables !
Par exemple, il y a un espace entre ${code}if${reset} et le code entre [].
Vous pouvez tout simplement voir ${code}if${reset} comme une commande qui prend ce code en argument.
Bien évidemment un espace est indispensable pour séparer une commande de son argument.
L'argument d'un ${code}if${reset} peut être soit ${learn}true${reset} (vrai) soit ${learn}false${reset} (faux).
C'est en fait ce que renvoit le code que vous voyez ici ${code}[ \\$X -eq 1 ]${reset}, c'est un ${voc}test logique${reset} qui renverra ${learn}true${reset} si la variable X est égal à 1, et ${learn}false${reset} si ça n'est pas le cas.
Vous pouvez également utiliser la variable ${code}\\$?${reset} que nous avons déjà vu.
+Testez donc si 1 est égal à 2 avec : ${learn}[ 1 -eq 2 ];echo \\$?${reset}
![ 1 -eq 2 ];echo \\$?£Non
Si donné en argument à if, 0 devient ${learn}true${reset} et tout autre nombre devient ${learn}false${reset}. Ici ce 1 deviendra donc ${learn}false${reset}.
Ce ${code}-eq${reset} permet de comparer si deux nombres sont équivalents. (de l'anglais EQual : égal)
Vous pouvez en utilisez d'autres, comme ${code}-lt${reset} (Less Than / moins que), ${code}-gt${reset} (Greater Than / plus grand que), ${code}-ge${reset} (Greater or Equal / plus grand ou égal), ${code}-le${reset} (Less or Equal / moins ou égal) et ${code}-ne${reset} (Not Equal / pas égal).
Par exemple, si X=1, le code ${code}[ \\$X -eq 1 ]${reset} renverra ${learn}true${reset}, ${code}[ 1 -lt 2 ]${reset} renverra ${learn}true${reset} et ${code}[ 22 -gt 2 ]${reset} renverra ${learn}false${reset}.
${code}[ 1 -eq 1 ]${reset} renverra ${learn}true${reset} (\\$? = 0) si 1 est égal à 1, ce qui sera bien évidemment toujours le cas.
C'est pourquoi vous pouvez aussi utiliser cette syntaxe que vous connaissez déjà : ${learn}[ 1 -eq 1 ] && echo GOOD${reset}
N'importe quelle commande en argument de ${code}if${reset} peut également fonctionner.
+Testez donc cette commande, qui affiche 'GOOD' si la commande donnée en argument est un succès : ${learn}if ls;then echo GOOD;fi${reset}
!if ls;then echo GOOD;fi£Non
${code}ls${reset} renvoit ${learn}true${reset} à ${code}if${reset} car la commande est un succès. Autrement dit ${code}\\$?${reset} est égal à 0.
+Essayez donc de faire : ${learn}if true;then echo vrai;else echo faux;fi${reset}
!if true;then echo vrai;else echo faux;fi£Non
Si vous n'en avez pas besoin, le ${code}else${reset} dans votre script n'est pas obligatoire.
+Essayez donc de faire : ${learn}if true;then echo vrai;fi${reset}
!if true;then echo vrai;fi£Non
Dans cet exemple, tous les espaces et les ${code};${reset} sont indispensables, faites donc bien attention à ne pas en oublier.
${learn}if${codeFile} ${learn}true;then echo vrai;fi${reset} : Cet espace en vert entre ${code}if${reset} et son argument est ${voc}important${reset}, c'est pourquoi ${code}if [ \\$X -gt 5 ]${reset} est correct mais ${codeError}if[ \\$X -gt 5 ]${reset} ne l'est pas.
${learn}if true${codeFile};${learn}then echo vrai;fi${reset} : La commande ${code}if${reset} et son argument doivent aussi être séparés du reste, c'est pourquoi il faudra utiliser un ${code};${reset} ou une mise à la ligne.
${learn}if true;${codeFile}then echo vrai;${learn}fi${reset} : Pour être valide, un ${code}if${reset} doit contenir le mot clef 'then', suivi d'un espace, suivi d'au moins une commande et d'un ${code};${reset}.
${learn}if true;then echo vrai;${codeFile}fi${reset} : Il doit aussi se terminer par un ${code}fi${reset}.
#echo -e "\\nif\\ntrue\\nthen\\necho vrai\\nfi"
La présentation est bien évidemment flexible, ces espaces et ${code};${reset} peuvent être remplacés par des mises à la lignes comme vous le voyez dans le code ci-dessus.
Mais revenons sur un exemple complet 'if/then/else/fi' : ${code}if true;then echo vrai;else echo faux;fi${reset}
Ici, quel que soit la situation, il est important de comprendre que seul l'${voc}une${reset} de ces commandes ${code}echo${reset} se lancera, ${voc}jamais${reset} les deux.
+Revenons maintenant sur notre premier exemple, réaffichez le contenu du fichier 'if1'.
!cat if1£Non
+Puis lancez ce script avec : ${learn}bash if1${reset}, puis donnez à X la valeur 1 en tapant simplement 1 et validez avec la touche entrée.
!bash if1£Non
+Lancez à nouveau ce script avec : ${learn}bash if1${reset}, et donnez à X une valeur numérique différente de 1.
!bash if1£Non
Maintenant vous devriez comprendre comment cette syntaxe fonctionne.
+Affichez maintenant le contenu du fichier 'if2'.
!cat if2£Non
Le code du script 'if2' est équivalent au code du script 'if1', seul la présentation du code est différente.
Ici les ${code};${reset} ont été remplacés par des mises à la ligne.
+Affichez donc le contenu du fichier 'if3'.
!cat if3£Non
Comme pour les commandes, les espaces peuvent être utilisés pour présenter votre code différemment, par exemple pour le rendre plus lisible.
Traditionnelement, des tabulations ou plusieurs espaces sont ajoutés au début d'une ligne quand le code est d'un autre niveau.
On appelle cette présentation un style d'indentation, l'${voc}indentation${reset} étant ce décalage en début de ligne avant le code ${code}echo COURS${reset}
Avec l'exemple de 'if3', il est très facile de voir le ${voc}bloc de code${reset} à l'intérieur du ${code}if${reset} et celui à l'intérieur du ${code}else${reset}.
+Affichez donc le contenu du fichier 'if4'.
!cat if4£Non
Après ce ${code}fi${reset} le script continuera à s'exécuter normalement ligne par ligne.
C'est à dire qu'ici, quel que soit la valeur donnée à 'X' la commande ${code}echo TEXTE${reset} se lancera.
L'absence d'espaces en début de ligne nous permet de rapidement comprendre que cette ligne de code n'est pas dépendant d'un ${code}if${reset}.
Mais attention, ces ${voc}indentations${reset} ne sont pas obligatoires : c'est un choix esthétique qui revient au créateur du script.
Je vous recommande cependant d'utiliser ce ${voc}style d'indentation${reset} pour que votre script soit plus facilement compréhensible.
Nous avons donc vu que le code ${code}[ \\$X -eq 5 ]${reset} est capable de vérifier si 'X' est égal à la valeur 5. (anglais ${code}eq${reset}ual)
Mais vous pouvez aussi vérifier si 'X' n'est ${voc}pas${reset} égal à la valeur 5 avec : ${code}[ \\$X -ne 5 ]${reset} (anglais ${code}n${reset}ot ${code}e${reset}qual)
Vérifier si 'X' est supérieur à 5 avec : ${code}[ \\$X -gt 5 ]${reset} (anglais ${code}g${reset}reater ${code}t${reset}han)
Vérifier si 'X' est inférieur à 5 avec : ${code}[ \\$X -lt 5 ]${reset} (anglais ${code}l${reset}esser ${code}t${reset}han)
Ce code entre '[ ]' contiendra la logique qui sera donné à if.
Mais ce code peut aussi être utilisé comme une commande avec une syntaxe que nous avons déjà vu.
+Affichez donc le contenu du fichier 'if5'.
!cat if5£Non
Cette syntaxe est identique au traditionnel 'if/then/else/fi', mais sa lisibilité est assez réduite, je vous déconseille donc de l'utiliser dans un script lorsque les conditions deviennent complexes.
Voyons donc maintenant un exemple contenant ${voc}plusieurs niveaux de conditions${reset} : des if dans d'autres if.
+Affichez donc le contenu du fichier 'if6'.
!cat if6£Non
Ce code est en fait très simple, mais le manque d'indentation le rend impossible à lire.
+Voyons le même code avec une indentation propre, affichez donc le contenu du fichier 'if7'.
!cat if7£Non
Ici avec ce genre de présentation, il est très facile de voir quelles commandes appartiennent à quel ${code}if${reset}, quel ${code}else${reset} correspond à quel ${code}if${reset} et quel sont les ${code}if${reset} à l'intérieur d'autres ${code}if${reset}.
A chaque passage dans un nouveau ${code}if${reset} vous pouvez voir ici une tabulation de plus avant le début de la commande.
Au contraire, à chaque fois qu'un ${code}if${reset} se termine avec un ${code}fi${reset}, il y a une tabulation de moins.
Maintenant que ce code est plus lisible, nous allons le lire et le comprendre ensemble.
Pour cela nous allons nous comporter comme le ferait 'bash', en lisant et interprétant les commandes ligne par ligne.
#echo '';echo -e '\\e[30;48;5;82mX=11\\e[0m\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Tout d'abord, une variable nommé X sera créé et contiendra la valeur 11.
#echo '';echo -e 'X=11\\n\\e[30;48;5;82mif [ $X -gt 5 ];then\\e[0m\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Ensuite nous avons notre première condition.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\e[30;48;5;81m\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\e[0m\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Si celle-ci est correcte nous entrerons dans le code du 'then' correspondant.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\e[30;48;5;81m\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\e[0m\\nfi'|cat -n
- Si cette condition est incorrecte, nous entrerons dans le 'else' correspondant à ce premier 'if'.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\e[30;48;5;81m\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\e[0m\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Ici X étant égal à 11, nous rentrons dans le 'if' car 11 est un nombre plus grand que 5.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\e[41m\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\e[0m\\nfi'|cat -n
- Dans notre cas avec X=11, ce code ne sera donc pas utilisé.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\e[30;48;5;82m\\techo h\\e[0m\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Dans ce 'if' nous avons notre première commande qui sera executée : ${code}echo h${reset}, qui affichera la lettre h.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\t\\e[30;48;5;82mif [ $X -lt 10 ];then\\e[0m\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Puis nous avons une nouvelle condition sur la valeur de X : si X est inférieur à 10.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\e[41m\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\e[0m\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- X étant égal à 11, et 11 n'étant pas inférieur à 10, nous ignorerons le contenu de ce 'if'.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\e[30;48;5;81m\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\e[0m\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Et nous irons dans le contenu du 'else' correspondant à ce 'if'.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\t\\e[30;48;5;82mecho e\\e[0m\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Notre deuxième commande est donc : ${code}echo e${reset}, qui affichera la lettre e.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\t\\e[30;48;5;82mif [ $X -lt 11 ];then\\e[0m\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\techo y\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Puis nous avons un nouvelle condition : si X est inférieur à 11.
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\techo h\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\techo e\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\t\\e[30;48;5;82mecho y\\e[0m\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- X n'étant pas inférieur à 11, puisqu'il est égal à 11, nous irons dans le 'else' correspondant, et nous affichons notre troisième lettre avec ${code}echo y${reset}
#echo '';echo -e 'X=11\\nif [ $X -gt 5 ];then\\n\\t\\e[30;48;5;82mecho h\\e[0m\\n\\tif [ $X -lt 10 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 8 ];then\\n\\t\\t\\techo i\\n\\t\\telse\\n\\t\\t\\techo f\\n\\t\\tfi\\n\\telse\\n\\t\\t\\e[30;48;5;82mecho e\\e[0m\\n\\t\\tif [ $X -lt 11 ];then\\n\\t\\t\\techo o\\n\\t\\telse\\n\\t\\t\\t\\e[30;48;5;82mecho y\\e[0m\\n\\t\\tfi\\n\\tfi\\nelse\\n\\tif [ $X -lt 3 ];then\\n\\t\\techo o\\n\\t\\tif [ $X -eq 1 ];then\\n\\t\\t\\techo l\\n\\t\\telse\\n\\t\\t\\techo u\\n\\t\\tfi\\n\\telse\\n\\t\\techo x\\n\\tfi\\nfi'|cat -n
- Au final, avec X égal à 11, voilà les trois commandes qui seront exécutés.
+Vous pouvez maintenant lancer ce script avec : ${learn}bash if7${reset}.
!bash if7£Non
Bash affiche bien ce que nous avions prévu : h, puis e, puis y.
Bien évidemment, lorsque la valeur de X n'est pas 11, le même code n'affichera pas la même chose.
+Affichez donc le contenu du fichier 'if8'.
!cat if8£Non
Ici le code est identique, seul la valeur de X a changé, essayez de lire ce code et trouvez ce qu'il affichera avant de continuer.
+Si vous pensez avoir la bonne réponse, lancez ce script pour vérifier : ${learn}bash if8${reset}.
!bash if8£Non
Lorsque vous voyez ces [], il s'agit en fait de la syntaxe secondaire de la commande ${code}test${reset}.
Par exemple, ${code}[ 1 -eq 2 ]${reset} est en fait équivalent à ${code}test 1 -eq 2${reset} !
N'hésitez donc pas à voir plus de détails sur ces ${voc}tests logiques${reset} avec un : ${code}man test${reset} !
En avant pour le questionnaire !
#clean
