#[ -d "$HOME/.GameScript_sys1" ] && echo "Erreur inattendue, ${HOME}/.GameScript_sys1 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_sys1 et relancez ce script." && exit
#command -v tmux >/dev/null 2>&1 || { echo "Veuillez installer les dépendances requises. Faites en tant qu'administrateur : apt-get install tmux galculator leafpad" >&2; exit 3; }
#command -v galculator >/dev/null 2>&1 || { echo "Veuillez installer les dépendances requises. Faites en tant qu'administrateur : apt-get install tmux galculator leafpad" >&2; exit 3; }
#command -v leafpad >/dev/null 2>&1 || { echo "Veuillez installer les dépendances requises. Faites en tant qu'administrateur : apt-get install tmux galculator leafpad" >&2; exit 3; }
#mkdir $HOME/.GameScript_sys1 2> /dev/null
#cd $HOME/.GameScript_sys1
Votre système d'exploitation est multitâche, c'est à dire qu'il est capable d'exécuter plusieures tâches simultanément.
Par exemple, vous pouvez avoir un éditeur de texte et un navigateur web ouvert en même temps sans rencontrer de difficultés.
Lorsque ces programmes sont en cours d'exécution sur votre ordinateur, on parle alors de ${voc}processus${reset}.
Un programme est donc une entité ${voc}passive${reset} (Seulement présente sur votre disque en tant que fichier exécutable), alors qu'un processus est une entité ${voc}active${reset} (Exécuté par votre processeur).
Un même programme peut être lancé plusieures fois, il est donc possible d'avoir plusieurs processus pour un seul programme.
Dans cette série nous verrons ensemble comment analyser et contrôler ces processus.
+Commencons par lister vos processus avec la commande : ${learn}ps${reset}
!ps£Non
Evidemment il y a bien plus de processus que ça sur votre ordinateur...
+Pour lister tous les processus, faites : ${learn}ps -e${reset}
!ps -e£Non
+Pour compter le nombre de processus dans cette liste, vous pouvez donc faire : ${learn}ps -e|wc -l${reset}
!ps -e|wc -l£Non
Mais pour l'instant nous allons nous concentrer sur le résultat de la commande ps, qui affiche uniquement certains de ces processus.
+Faites donc à nouveau : ${learn}ps${reset}
!ps£Non
Tout exécutable qui a été 'exécuté' sur votre système d'exploitation est un processus !
Votre terminal est un processus, mais l'instance de bash à l'intérieur de ce terminal est également un processus.
+Affichez plus détails sur ces processus avec : ${learn}ps -f${reset}
!ps -f£Non
Chaque processus aura un identifiant unique capable de l'identifier : son PID, ici la deuxième colonne. (l'anglais de Process IDentifier)
C'est un numéro unique qui pourra être utilisé pour manipuler le comportement du processus portant ce numéro.
Vous avez ici, une colonne nommée 'PPID' : Il s'agit de l'identifiant (PID) du processus parent. (Parent Process IDentifier)
Les processus ont une relation parent/enfant : Dans cet example, on dit que la commande 'ps -f' est le processus enfant de 'standalone.sh' et que 'standalone.sh' est le parent du processus 'ps -f'.
+Affichez donc le même résultat avec une indentation : ${learn}ps -fH${reset}
!ps -fH£Non
Cette indentation/décalage avec l'option '-H' représente visuellement cette relation enfant/parent.
Ici vous pouvez voir que 'gamescript.sh' est le parent d'un processus 'standalone', qui est en fait le chapitre que vous utilisez en ce moment. (sys 1)
Toutes les commandes que vous lancez ici seront bien évidemment aussi des processus.
C'est pourquoi vous pouvez voir ici la commande 'ps -fH'. C'est un processus comme un autre, on peut dire qu'il s'affiche lui-même.
Mais ce processus 'ps -fH' est différent des autres parce qu'il n'existe plus !
Il existera juste le temps qu'il lui faut pour afficher ce qu'il doit afficher et disparaîtra.
Si cette commande est lancée à partir d'un shell bash, cette instance de bash sera le parent de ce processus et cette commande y sera 'attachée'.
Ici ,cette commande étant lancé à partir d'un script (standalone.sh), elle s'attachera au même terminal que ce script.
Le processus en question prendra le contrôle de votre shell et s'appropriera son interactivité.
+Voyons la même chose au ralentit : lancez par exemple la commande qui attend 3 secondes : ${learn}sleep 3${reset}
!sleep 3£Non
Ici, votre terminal attend que la commande soit terminée pour vous rendre la main. Cette commande dure bien évidemment 3 secondes.
Entre temps, votre terminal est inutilisable !
#tmux split-window -v -p 50
+Je viens d'ouvrir pour vous une nouvelle instance de bash avec 'tmux'. Pour alterner entre ce nouveau terminal et GameScript, vous devez faire 'Ctrl + b' puis appuyez sur la touche 'o' ou les flèches de votre clavier. Revenez donc sur GameScript pour continuer.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
+Maintenant retournez dans le terminal du bas, lancez 'sleep 10', mais avant que cette commande ne se termine, essayez de lancer la commande 'pwd', puis revenez sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Ici vous voyez que le terminal a complétement ignoré votre commande.
+Maintenant retournez dans le terminal du bas, lancez 'leafpad', essayez de lancer la commande 'pwd', puis revenez sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Encore une fois, vous pouvez voir que le terminal a complétement ignoré votre commande.
Quitter maintenant le processus leafpad en faisant 'Fichier' 'Quitter' et vous devriez voir que le terminal du bas redeviendra disponible.
Si vous lancez un processus interactif (comme leafpad), votre terminal se mettre en 'pause'.
Vous ne pouvez plus interagir avec votre shell, mais vous pouvez en revanche envoyer des signaux à ce processus à partir du terminal qui l'a lancé.
Le signal le plus important est certainement 'Ctrl + c', qui vous permet de fermer le processus qui monopolise votre terminal.
+Retournez dans le terminal du bas, lancez à nouveau 'leafpad', puis faites 'Ctrl + c' dans ce terminal pour fermer 'leafpad'.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Si vous voulez lancer un programme, mais que vous voulez continuer à pouvoir utiliser votre terminal, vous pouvez aussi le ${voc}suspendre${reset} avec la combinaison 'Ctrl + z'.
+Retournez dans le terminal du bas, lancez ${learn}leafpad${reset}, puis faites 'Ctrl + z' dans le terminal pour détacher 'leafpad', essayez la commande 'pwd'.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Cette fois, vous pouvez remarqué que leafpad ne s'est pas fermé, mais vous pouvez continuer à utiliser votre terminal normalement.
+Maintenant lancez dans le terminal du bas la commande ${learn}ps${reset}, puis revenez sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Sans argument, la commande ${learn}ps${reset} affichera les processus enfants de votre shell.
Comme vous avez utilisé ce terminal pour lancer 'leafpad', vous pouvez voir ici que 'leafpad' est dans la liste.
+Lancez donc ici également la commande : ${learn}ps${reset}
!ps£Non
Dans le terminal de GameScript, vous voyez bien que 'leafpad' n'est pas présent avec un simple 'ps', car ce terminal n'est pas le parent de ce processus !
+Retournez maintenant dans le terminal du bas et affichez les relations parents/enfants de vos processus avec la commande : ${learn}ps -fH${reset}
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Ici vous pouvez voir clairement que leafpad est un enfant de votre shell (bash).
Maintenant, essayez d'écrire quelque chose dans leafpad, puis revenez sur GameScript pour continuer.
'Ctrl + z' a ${voc}suspendu${reset} ce processus de leafpad, ce qui a eu pour effet de le rendre ${voc}inutilisable${reset}.
Pour faire l'inverse de 'Ctrl + z', c'est à dire récupérer ce programme, vous pouvez utilisez la commande 'fg'.
+Retournez dans le terminal du bas, lancez ${learn}fg${reset}, essayez d'utiliser votre instance de 'leafpad' et revenez sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
'fg' est l'abréviation de 'foreground', l'anglais de 'premier plan' : le processus revient donc au 'premier plan'.
Vous pouvez voir que 'leafpad' est maintenant utilisable mais plus votre terminal...
Vous pouvez aussi utiliser la commande 'bg', l'abréviation de 'background', l'anglais de 'arrière plan' pour que le processus soit utilisable mais ne monopolise pas le terminal !
+Retournez sur le terminal du bas, faites 'Ctrl + z' pour détacher 'leafpad' et utilisez la commande 'bg' pour rendre 'leafpad' utilisable à nouveau. ('leafpad' tournera en 'arrière plan'.)
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
+Retournez sur le terminal du bas, puis affichez la situation des processus que vous avez ouvert dans ce terminal avec la commande : ${learn}jobs${reset}
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Un 'job' est un processus que vous pouvez contrôler avec 'fg' ou 'bg'.
Nous n'avons qu'un seul processus pour le moment, mais nous allons en rajouter un à cette liste !
+Retournez sur votre terminal, lancez une autre instance de 'leafpad', faites à nouveau 'Ctrl + z' et lancer la commande ${learn}jobs${reset} avant de revenir sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Ici nous avons deux 'jobs', et l'un d'entre eux n'est pas utilisable, comme vous pouvez le voir car son état est : ${voc}Stopped${reset}.
Si il n'y a qu'un seul job dans votre terminal, vous n'avez pas besoin de spécifier un argument aux commandes ${code}fg${reset} et ${code}bg${reset}.
En revanche, si vous en avez plusieurs comme maintenant, il faudra ajouter en argument leur identifiants, que vous pouvez voir dans la première colonne.
+Retournez dans le terminal du bas, et mettez le job [2] en arrière plan avec ${learn}bg %2${reset}, puis revenez sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Si vous vouliez utiliser ${learn}fg${reset} à la place, la syntaxe aurait été similaire : ${learn}fg %2${reset}
+Retournez dans le terminal du bas, et faites à nouveau : ${learn}jobs${reset}
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Vous devriez voir maintenant que vos deux instances de leafpad ont comme état : ${voc}Running${reset}.
Il est aussi possible de lancer directement un processus en arrière plan avec le symbole ${code}&${reset} à la fin de votre commande.
+Faites le donc maintenant. Retournez dans le terminal du bas, lancez une troisième instance de leafpad directement en arrière plan avec ${learn}leafpad&${reset} et refaites ${learn}jobs${reset}.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Ici vous voyez qu'avec l'utilisation du symbole ${code}&${reset} son statut est automatiquement ${voc}Running${reset} et votre terminal est utilisable.
'jobs', 'bg', 'fg' et '&' sont très utiles pour contrôler les jobs du terminal en question.
Mais ${voc}attention${reset} !! Si vous fermez ce terminal, tous ses jobs se fermeront également !
#tmux last-pane
#tmux split-window -h -p 50
+Voyons un exemple de ce phénomène. Je viens d'ouvrir un troisième terminal avec 'tmux'. Lancez la commande 'galculator&' dedans puis fermer ce "terminal" avec la commande 'tmux kill-pane'.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
La commande 'tmux kill-pane' simule dans tmux le simple fait de fermer votre terminal. (Fichier/Quitter dans un terminal graphique par exemple.)
Et vous pouvez voir que le processus 'galculator' s'est également fermé en même temps.
Attention donc à ne pas fermer le terminal qui contient vos processus importants !
Si vous voulez fermer ce terminal, mais que ce processus enfant reste ouvert, vous pouvez ordonner à ce terminal d'abandonner ce processus avec la commande ${learn}disown${reset}.
+Retournez donc dans le terminal du bas, faites ${learn}disown %1${reset}, puis réaffichez l'état de vos jobs.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Ici vous voyez que l'un des processus de leafpad n'est plus dans la liste, mais ce processus existe toujours.
+Vérifiez sa présence maintenant avec un : ${learn}ps -elf|grep leafpad${reset}
!ps -elf|grep leafpad£Non
Ici il y a bien 3 instances de leafpad, mais seulement 2 sont relié au terminal du bas.
A partir de maintenant, ce processus ne se fermera plus quand votre terminal se fermera. (Faites moi confiance pour le moment.)
Mais n'oubliez pas que ces 'jobs' sont avant tout des ${voc}processus${reset} !
Et vous pouvez aussi directement les contrôler avec leur PID, quel que soit votre terminal actuel.
+Retournez dans le terminal du bas, affichez le PID de vos jobs avec ${learn}jobs -l${reset} et la liste de vos processus enfants avec ${learn}ps -fH${reset}.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Avec son PID et la commande ${code}kill${reset}, vous pouvez cibler un processus même en dehors de votre terminal. (contrairement à fg, bg et disown.)
La commande ${code}kill${reset} (anglais de tuer) permet de fermer un processus dont le PID est donné en argument.
#THISPID=`ps -e|grep leafpad|grep -v grep|tail -n 1|awk '{ print $1 }'`
+Fermez l'un des processus de leafpad à partir du terminal de GameScript avec : ${learn}kill $THISPID${reset} (Notez le PID correspondant dans le terminal ci-dessous.)
!kill $THISPID£Non
+Retournez dans le terminal du bas et listez vos processus à nouveau avec ${learn}ps -fH${reset}, puis revenez sur GameScript.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Ici il est bien clair que l'une des instances de leafpad a été fermée.
Malgré son nom, la commande ${code}kill${reset} est capable de faire bien plus que de 'tuer' un processus.
${code}kill${reset} est capable d'envoyer vers un processus une grande quantité de ${voc}signaux${reset} différents que vous pouvez donner en option.
+Regardez rapidement le résultat de la commande ${code}man 7 signal${reset} pour affichez la liste des signaux disponibles et revenez sur GameScript en quittant avec la touche 'q'.
!man 7 signal£Non
Ici nous allons nous intéresser à seulement cinq de ces signaux : SIGTSTP, SIGSTOP, SIGCONT, SIGTERM et SIGKILL
SIGTERM est le signal par défaut de la commande ${code}kill${reset}, c'est à dire que la commande ${code}kill${reset} est équivalente à la commande ${code}kill -SIGTERM${reset}.
Le processus en argument de la commande ${code}kill${reset} recevra ce signal SIGTERM et tentera de se fermer proprement.
Si votre processus ne répond plus pour une certaine raison, il ne sera pas possible de le fermer de cette manière...
Dans ce genre de situation, (qui ne devrait jamais se produire sans une excellente raison) vous pouvez envoyez le signal SIGKILL !
Contrairement à SIGTERM, le signal SIGKILL ne peut pas être bloqué par le processus cible, il n'aura donc pas l'occassion de se fermer proprement : on peut dire qu'il sera froidement assassiné.
+Pour afficher le statut de vos processus, vous pouvez utiliser ps avec son option -l. Essayez donc ${learn}ps -l${reset} dans le terminal du bas.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Le statut de vos processus est dans le résultat de ${code}ps -l${reset} une lettre dans la colonne S (statut).
${code}T${reset} est l'équivalent du statut job 'Running', et ${code}S${reset} est l'équivalent du statut 'Stopped'.
Pour plus de détails sur ces statuts et leurs significations, n'hésitez pas à visitez le manuel de la commande ${code}ps${reset}.
#THISPID=`ps -e|grep leafpad|head -n 1|awk '{ print $1 }'`
Voyons maintenant deux autres signaux, capables de changer le statut de vos processus : SIGTSTP et SIGSTOP.
Le signal SIGTSTP a le même effet que la combinaison de touche 'Ctrl + z' : votre processus sera 'suspendu'.
Le signal SIGSTOP est similaire à SIGTSTP, mais comme SIGKILL, il ne pourra pas être ignoré par le processus cible.
+Affichez donc le statut de vos processus leafpad avec : ${learn}ps -elf|grep leafpad${reset} ('elf' est l'anglais de 'elfe' :p)
!ps -elf|grep leafpad£Non
+Suspendez l'un de ces processus leafpad avec : ${learn}kill -SIGTSTP $THISPID${reset}
!kill -SIGTSTP $THISPID£Non
+Puis listez à nouveau le statut de vos processus leafpad.
!ps -elf|grep leafpad£Non
Cette commande confirme que cette instance de leafpad à été suspendue (T), mais vous pouvez tester par vous-même : l'une de vos instance de leafpad n'est plus utilisable.
+Pour permettre à ce processus de continuer à exister, faites : ${learn}kill -SIGCONT $THISPID${reset}
!kill -SIGCONT $THISPID£Non
+Puis faites à nouveau : ${learn}ps -elf|grep leafpad${reset}
!ps -elf|grep leafpad£Non
Cette commande confirme que cette instance de leafpad est à nouveau utilisable (S), mais vous pouvez tester par vous-même.
Mais... qu'en est-il de la combinaison 'Ctrl + c' que nous avions déjà vu ? Est-ce un signal ?
Et bien oui. Et le signal en question est SIGINT, qui représente une interruption par l'intermédiaire du clavier.
Mais son effet est similaire à SIGTERM : il donne donc au processus l'occasion de se fermer proprement.
+Avant de finir ce chapitre, fermez le terminal du bas avec la commande ${learn}tmux kill-pane${reset}.
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" == "1" ]]; do sleep 1; done
#while [[ "`tmux list-panes -F '#{pane_active}'|head -n 1`" != "1" ]]; do sleep 1; done
Comme promis, l'un des processus de leafpad a survécu : celui que vous avez ${code}disown${reset} !
Votre confiance a finit par payer... Vous être prêt pour le questionnaire !
#clean
