Votre système d'exploitation est multitâche, c'est à dire qu'il est capable d'exécuter plusieurs tâches simultanément.
Par exemple, vous pouvez avoir un éditeur de texte et un navigateur web ouvert en même temps sans rencontrer de difficultés.
Lorsque ces programmes sont en cours d'exécution sur votre ordinateur, on parle alors de ${voc}processus${reset}.
Un programme est donc une entité 'passive', alors qu'un processus est une entité 'active'.
Un même programme peut être lancé plusieures fois, il est donc possible d'avoir plusieurs processus pour un seul programme.
Dans cette série nous verrons ensemble comment analyser et contrôler nos différents processus.
+Commencons par lister vos processus avec la commande : ${learn}ps${reset}
!ps£Non
Evidemment il y a bien plus de processus que ca sur votre ordinateur.
+Pour lister tous les processus, faites : ${learn}ps -e${reset}
!ps -e£Non
+Pour compter le nombre de processus dans cette liste, vous pouvez donc faire : ${learn}ps -e|wc -l${reset}
!ps -e|wc -l£Non
Mais pour l'instant nous allons nous concentrer sur le résultat de la commande ps.
+Faites donc à nouveau : ${learn}ps${reset}
!ps£Non
Chaque processus aura un identifiant unique capable de l'identifier : son PID. (l'anglais de Process IDentifier)
C'est un numéro unique qui pourra par exemple être utilisé pour manipuler le comportement du processus portant ce numéro.
Tout programme qui tourne actuellement sur votre système d'exploitation est un processus !
Votre terminal est un processus, mais l'instance de bash à l'intérieur de ce terminal est également un processus.
Ce terminal et son instance de bash ont une relation parent/enfant : On dit que cette instance de bash est l'enfant de ce terminal et que ce terminal est le parent de cette instance de bash.
Cette instance de bash est en fait elle-même le parent du processus GameScript que vous utilisez en ce moment.
Toutes les commandes que vous lancez seront bien évidemment aussi des processus.
Si cette commande est lancé à partir de bash, ce bash sera le parent de ce processus et y sera 'attaché'.
Tant que ce programme n'est pas terminé, vous ne pouvez plus lancer d'autres commandes avec cette instance de bash.
Le processus en question prendra alors controle de l'interpreteur bash et s'appropriera son stdin et stdout.
+Essayez donc de lancer leafpad, regardez l'état de votre terminal, puis quitter leafpad en cliquant sur "fichier", puis "quitter".
!leafpad£Non
Quitter le processus leafpad vous permet de continuer à utiliser votre terminal normalement.
Ici vous pouvez donc continuer à utiliser GameScript.
Comme le processeur utilise stdin vous pouvez envoyer des signaux au processus.
Vous pouvez par exemple fermer ce processus directement dans le terminal ou il est attaché avec une combinaison de touche.
Attention cependant à ne pas le faire deux fois, car GameScript est lui-même un processus qui peut être fermé avec la même combinaison de touche : 'Ctrl+ c'.
+Ouvrez leafpad, puis fermez le en faisant 'Ctrl + c' dans votre terminal.
!leafpad£Non
Si vous voulez lancer un programme, mais que vous voulez continuer à utiliser votre terminal, vous pouvez suspendre ce programme avec la combinaison 'Ctrl+ z'.
Encore une fois, attention à ne pas le faire deux fois et détacher GameScript par erreur.
+Ouvrez leafpad, retournez dans votre terminal et détachez 'leafpad' avec 'Ctrl + z' pour continuer à utiliser GameScript.
!leafpad£Non
Ici vous pouvez remarquer que leafpad est toujours ouvert, mais vous pouvez continuer à utiliser GameScript normalement.
+Faites donc à nouveau : ${learn}ps${reset}
!ps£Non
Sans argument, la commande ${learn}ps${reset} affichera le processus correspondant à votre terminal ainsi que tous ses processus enfants.
Comme vous avez utilisé ce terminal pour lancer 'leafpad', vous pouvez voir ici 'leafpad' est dans la liste.
+Affichez donc les relations parents/enfants de vos processus avec : ${learn}ps -l${reset}
!ps -l£Non
Avec cette option -l, vous pouvez voir une nouvelle colonne nommée 'PPID' : Il s'agit de l'identifiant du processus parent. (Parent Process IDentifier)
Ici vous pouvez voir clairement que GameScript et leafpad sont tous les deux des enfants de ce processus bash.
Vous pouvez voir ces relations sous la frome d'un arbre avec l'option -H.
+Essayez donc avec la commande : ${learn}ps -H${reset}
!ps -H£Non
Maintenant, essayez d'écrire quelque chose dans leafpad, puis revenez sur GameScript pour continuer.
'Ctrl + z' a suspendu ce processus de leafpad, ce qui a eu pour effet de le rendre inutilisable.
Pour faire l'inverse de 'Ctrl + z', c'est à dire récuperer ce programme, vous pouvez utilisez la commande 'fg'.
+Lancez ${learn}fg${reset}, essayez d'utiliser votre instance de 'leafpad' et faites à nouveau 'Ctrl + z' pour continuer à utiliser GameScript.
!fg£Non
'fg' est l'abréviation de 'foreground', l'anglais de 'premier plan'.
Vous pouvez aussi utiliser la commande 'bg', l'abréviation de 'background', l'anglais de 'arrière plan' pour que le processus soit utilisable mais ne monopolise pas le terminal.
+Affichez la situation des processus que vous avez ouvert dans ce terminal avec : ${learn}jobs${reset}
!jobs£Non
Un 'job' est un processus que vous pouvez contrôler avec 'fg' ou 'bg'.
+Rajoutons un processus à cette liste : lancez une autre instance de 'leafpad', puis faites à nouveau 'Ctrl + z' pour continuer à utiliser GameScript.
!leafpad£Non
+Et faites à nouveau : ${learn}jobs${reset}
!jobs£Non
Ici nous avons deux 'jobs', et aucun d'entre eux n'est utilisable, comme vous pouvez le voir car leur état est : ${voc}suspended${reset}.
Si il n'y a qu'un seul job dans votre terminal, vous n'avez pas besoin de spécifier un argument.
En revanche, si vous en avez plusieurs, il faudra donner en argument leur identifiants, que vous pouvez voir tout à gauche entre crochets.
+Nous voulons maintenant mettre le job [1] en arrière plan, faites donc : ${learn}bg %1${reset}
!bg %1£Non
Vous devriez voir une ligne confirmant le changement d'état de votre job avec le mot clef : ${voc}continued${reset}.
Si vous vouliez utiliser ${learn}fg${reset} à la place, la syntaxe aurait été similaire : ${learn}fg %1${reset}
+Affichez l'état de vos jobs.
!jobs£Non
Vous devriez voir maintenant que l'une des deux instances de leafpad avec comme état : ${voc}running${reset}.
Cette instance de leafpad fonctionne tout à fait normalement et vous pouvez continuer à utiliser GameScript en même temps.
Il est aussi possible de lancer directement à partir de votre terminal un processus en arrière plan avec le symbole ${code}&${reset} à la fin de votre commande.
+Faites le donc maintenant. Lancez une autre instance de leafpad et mettez la en arrière plan avec : ${learn}leafpad&${reset}
!leafpad&£Non
+Et réaffichez l'état de vos jobs.
!jobs£Non
'jobs', 'bg', 'fg' et '&' sont très utiles pour contrôler les jobs du terminal en question.
Mais si vous fermez ce terminal, tous ses jobs se fermeront également !
+Voyons un exemple de ce phénomène : Ouvrez un terminal qui lance directement une instance de mousepad avec ${learn}lxterminal -e mousepad${reset}, puis fermez ce terminal !
!lxterminal -e mousepad£Non
Vous pouvez voir que cette instance de mousepad s'est également fermée.
+Réaffichez l'état de vos jobs.
!jobs£Non
Il en est de même pour ces jobs, lorsque vous quitter ce terminal, ces processus se fermeront.
Pour éviter que cela n'arrive, vous pouvez demander à votre terminal d'abandonner ce processus.
+Faites donc : ${learn}disown %1${reset}
!disown %1£Non
+Puis réaffichez l'état de vos jobs.
!jobs£Non
A partir de maintenant, cette instance de leafpad ne se fermera plus quand votre terminal se fermera.
Mais n'oubliez pas que ces jobs sont avant tout des processus !
Et vous pouvez aussi directement les contrôler avec leur PID.
+Affichez le PID de ces jobs avec : ${learn}jobs -l${reset}
!jobs -l£Non
+Ou vous pouvez listez vos processus avec : ${learn}ps${reset}
!ps£Non
Avec le PID d'un processus et la commande ${code}kill${reset}, vous pouvez le cibler même en dehors de votre terminal. (contrairement à fg, bg et disown.)
La commande ${code}kill${reset} (anglais de tuer) permet de fermer un processus dont le PID est donné en argument.
#THISPID=`jobs -l|head -n 1|awk '{ print $3 }'`
+Fermez un des processus de leafpad avec : ${learn}kill $THISPID${reset}
!kill $THISPID£Non
+Listez vos processus à nouveau avec : ${learn}ps -l${reset}
!ps -l£Non
Ici il est bien clair que l'une des instances de leafpad a été fermée.
Mais la commande ${code}kill${reset} est capable de faire bien plus que simplement fermer un processus.
+Regardez rapidement le résultat de la commande ${code}man 7 signal${reset} pour affichez la liste des signaux disponibles et revenez sur GameScript.
!man 7 signal£Non
Ici nous allons nous intéresser à quatre signaux : SIGTSTP, SIGCONT, SIGTERM et SIGKILL
SIGTERM est le signal par défaut de la commande ${code}kill${reset}, c'est à dire que la commande ${code}kill${reset} est équivalente à ${code}kill -SIGTERM${reset}.
SIGTERM demandera au programme de se fermer. Ce programme recevra ce signal et tentera de se fermer proprement.
Si votre programme ne répond plus pour une certaine raison, il ne sera pas possible de le fermer de cette manière.
Dans ce genre de situation, qui ne devrait jamais se produire sans une excellente raison, vous pouvez envoyez le signal SIGKILL.
Contrairement à SIGTERM, le signal SIGKILL ne peut pas être capturé par le processus cible, il ne pourra donc pas se fermer proprement.
+Listez à nouveau vos jobs avec : ${learn}jobs -l${reset}
!jobs -l£Non
+Listez à nouveau vos processus avec : ${learn}ps -l${reset}
!ps -l£Non
Le status de vos processus est dans la commande ${code}ps${reset} une lettre : T est l'équivalent du status job 'running', et S est l'équivalent du status 'suspended'.
Pour plus de détails sur ces status et leur signification, n'hésitez pas à visitez le manuel de la commande ${code}ps${reset}.
#THISPID=`jobs -l|head -n 1|awk '{ print $3 }'`
Voyons maintenant deux autres signaux, capable de changer le status du processus : SIGTSTP, SIGCONT.
Le signal SIGTSTP a le même effet que la combinaison de touche 'Ctrl + z' sur un processus au premier plan, sauf qu'il est capable de cibler n'importe quel processus avec son PID.
+Suspendez un processus leafpad avec : ${learn}kill -SIGTSTP $THISPID${reset}
!kill -SIGTSTP $THISPID£Non
+Puis listez le status de vos jobs avec : ${learn}jobs -l${reset}
!jobs -l£Non
+Pour permettre au processus de continuer, faites : ${learn}kill -SIGCONT $THISPID${reset}
!kill -SIGCONT $THISPID£Non
+Puis listez le status de vos jobs avec : ${learn}jobs -l${reset}
!jobs -l£Non
Mais alors qu'en est-il de la combinaison 'Ctrl + c' ?
Le signal équivalent est SIGINT, qui représente une interruption par l'intermédiaire du clavier.
Mais son effet est finalement similaire à SIGTERM, ce qui donne donc au processus l'occasion de se fermer correctement.
