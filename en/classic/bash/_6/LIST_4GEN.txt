#[ -d "$HOME/.GameScript_bash6" ] && echo "Unexpected error, ${HOME}/.GameScript_bash6 already exists on your system! Delete this $HOME/.GameScript_bash6 folder and restart this script." && exit
#mkdir $HOME/.GameScript_bash6 2> /dev/null
#cd $HOME/.GameScript_bash6
#echo "xxxxxx">intruders;echo "content f">f;chmod 222 f;echo "content f1">f1;chmod 000 f1;echo "content f10">f10;chmod 010 f10;echo "content f2">f2;chmod 444 f2;echo "content f3">f3;chmod 400 f3;echo "content f4">f4;chmod 455 f4;echo "content f50">f50;chmod 111 f50
+Let's start by evaluating our situation with a : ${learn}ls -l${reset}
!ls -l£No
We have here some problems of permission to solve...
First, we want to add the permissions of reading and writing for the owner on all elements of the current directory.
It is possible to put several filenames one after the other with only one ${code}chmod${reset} command.
+Do it for 'f1' and 'f2', then redisplay the new permissions if the command is successful.
!chmod u+rw f1 f2&&ls -l£No
Typing all the filenames is especially boring, especially if you have a large number of files to change.
In this chapter we will add some new special characters to our arsenal!
The first one we will see is : ${code}*${reset}
${code}*${reset} is a very powerful symbol, it's called a ${voc}wildcard${reset}.
${code}*${reset} can be used to replace all items in a directory.
That is, instead of having to type all the names one after the other, you just have to put a ${code}*${reset} instead.
+Add the permission to read and write for the owner on all items in the current directory, then redisplay the new permissions if the command is a success.
!chmod u+rw *&&ls -l£No
If the ${code}*${reset} is used alone, the targetted directory is of course the current directory: ${code}*${reset} = ${code}./*${reset}
But ${code}*${reset} can be used with any path, for example: ${code}/*${reset} represents all the elements of the root directory.
Here we have finally solved all our permissions problems in one command!
But ${code}*${reset} can also be used with other commands.
+Display the contents of all the files in the current directory one after the other.
!cat *£No
The display order is ${voc}alphabetical${reset}, exactly like the result of ${code}ls${reset}.
Note that 'f10' is placed before 'f2' because the default display is ${voc}alphabetical${reset} and not ${voc}numerical${reset}.
If you are interested in ordering file by numbers, you could have easily found the ${code}-v${reset} option in the manual of ${code}ls${reset}.
So ${code}*${reset} can represent all the elements of a directory.
But what exactly does it do to have this effect?
The symbol ${code}*${reset} can actually replace any string.
If it is used alone, it represents all the files that have any name...
But it is also possible to limit what it represents by adding characters to it.
+For example, you can display all items in the current directory that start with an 'f' with: ${learn}ls f*${reset}
!ls f*£No
Here the 'intruders' file is not present because its name does not start with an 'f'.
+Display all the elements of the current directory that end with a 0 with: ${learn}ls *0${reset}
!ls *0£No
The command ${code}ls${reset} also accepts several arguments, so you can use severals syntaxes.
+For example, try listing the permissions of all items in the current directory that end with either 0 or s.
!ls -l *0 *s£No
+Now list all the permissions of items in the current directory that begin with an 'i' and end with an 's'.
!ls -l i*s£No
With ${code}i*s${reset}, only the 'intruders' file fits the criteria.
In the case of this 'intruders' file, ${code}*${reset} will replace the string 'ntruder'.
If you need finer targeting, you can use another ${void}wildcard${reset} character : ${code}?${reset}.
${code}?${reset} only replaces ${voc}a single${reset} character!
+Try this command: ${learn}ls -l f?${reset}
!ls -l f?£No
Here 'f10' and 'f50' are not displayed because there are two characters after the letter f.
+Display these two files, with: ${learn}ls -l f??${reset}
!ls -l f??£No
+But what about the 'f' file? So, show its permissions.
!ls -l f£No
The file 'f' does exist, but did not show up in our last commands with ${code}?${reset} ...
${code}?${reset} replaces exactly ${code}one${reset} character, no more, no less.
+Try : ${learn}ls f*${reset}
!ls f*£No
Here, even if there are no characters after f, the file 'f' is displayed.
This is because ${code}*${reset} can also represent an empty string!
+To view the permissions of all files with a name composed of only on one character, you can use: ${learn}ls -l ?${reset}
!ls -l ?£No
Here 'f' is our only file with a name composed of a single character.
So be careful when you use these ${voc}wildcards${reset}, especially with ${voc}destructive commands${reset}!
A command like ${learn}rm *${reset} can have serious consequences.
+Now that these two new symbols are known, display the content of the 'f' file.
!cat f£No
When you use the command ${code}cat${reset}, you are actually displaying the ${voc}data${reset} of the file 'f'.
+Now display the results of ${learn}ls -l f${reset}.
!ls -l f£No
The informations displayed here are the ${voc}metadata${reset} of the 'f' file.
A ${voc}metadata${reset} is an information about your data!
${learn}ls -l${reset} is giving you ${voc}metadata${reset}.
Let's take this example: -rw------- 1 umen team 10 Feb 20 16:16 f
In this display, there are actually 7 columns.
${codeFile}-rw-------${reset} 1 umen team 10 Feb 20 16:16 f : You already know the first column, it's about the type of the element and its permissions.
-rw------- ${codeFile}1${reset} umen team 10 Feb 20 16:16 f : The second column is a number that counts the number of links or directories in an element.
But we will return to this number in another chapter, ignore it for the moment.
-rw------- 1 ${codeFile}umen${reset} team 10 Feb 20 16:16 f : The third column is the name of the owner.
-rw------- 1 umen ${codeFile}team${reset} 10 Feb 20 16:16 f : The fourth column is the name of the group.
-rw------- 1 umen team ${codeFile}10${reset} Feb 20 16:16 f : The fifth column is the ${voc}size${reset} in ${voc}byte${reset} of the file. (Octets)
Reminder: a byte is equal to 8 bits. And a bit can only have two values, 0 or 1.
This file of 10 bytes is therefore 80 bits!
For information, the content of our 'f' file is equal in binary to this: 01100011 01101111 01101110 01110100 01100101 01101110 01110101 00100000 01100110 00001010
-rw ------- 1 umen team 10 ${codeFile}Feb 20 16: 16${reset} f: The sixth column is the date when the file was last modified.
-rw ------- 1 umen team 10 Feb 20 16:16 ${codeFile}f${reset}: And the last column is just the name of the file.
In the previous chapter, you already used the ${code}touch${reset} command to create a file.
Indeed, with ${code}touch${reset}, if the file given as an argument does not exist, it will be created.
But the primary purpose of this command is to change this last-modified metadata. -rw------- 1 umen team $ 10 {codeFile}Feb 20 16: 16${reset} f
+To refresh the last modified date of 'f': ${learn}touch f${reset}
!touch f£No
+Do this now: ${learn}ls -l${reset}
!ls -l£No
The modification time of 'f' is indeed now the most recent.
+To display the current date just run the command: ${learn}date${reset}
!date£No
The command ${code}touch${reset} has had its effect on the last modification time.
+Now display the contents of the 'intruders' file.
!cat intruders£No
+And finally run : ${learn}ls -l intruders${reset}
!ls -l intruders£No
The date here has not changed, despite the ${code}cat${reset} command being used on this file.
Without further options, ${learn}ls -l${reset} displays the last time it was ${voc}changed${reset}, not the last time it was ${reset}read${voc}.
And of course, ${code}cat${reset} only displays the file without modifying it, so the time here does not change.
Now let's get back to permissions, especially on the ${code}chmod${reset} command.
We have already seen how to use ${code}chmod${reset} with letters: r, w, x, u, g, o.
But it is also possible to use ${code}chmod${reset} with 3 digits!
Each letter has a numeric value, the letter 'r' will be 4, 'w' will be 2 and 'x' will be 1.
It will then be necessary to add the permissions, 'rw-' will be 4 + 2 = ${voc}6${reset}, 'r-x' will be 4 + 1 = ${voc}5${reset}, 'r--' will be ${voc}4${reset}, 'rwx' will be 4 + 2 + 1 = ${voc}7${reset}, '---'will of course be ${voc}0${reset}, etc ...
You must use three of these sums respectively for the owner, the group, and the others.
For example, on the file 'test', to give all permissions to the owner but none to the rest, the code will be ${learn}chmod 700 test${reset}
${codeFile}7${reset}00 gives all the permissions to the owner: ${codeFile}rwx${reset}
7${codeFile}0${reset} 0 gives no permission to the group: ${codeFile}---${reset}
70${codeFile}0${reset} gives no permission to others: ${codeFile}---${reset}
${codeFile}700${reset} is equivalent to ${codeFile} rwx------${reset}.
+Give the rights rw-r--r-- to all elements of two letters in the current directory, using chmod and its digits.
!chmod 644 ??£No
+Let's see the result with: ${learn}ls -l${reset}
!ls -l£No
You may have noticed that the command ${learn}chmod 644 ??${reset} has no equivalent with letters.
Or rather, it takes several commands to have the same effect.
It will first reset all the permissions to 0 with ${learn}chmod ugo-rwx ??${reset}.
Then ${learn}chmod ugo+r${reset} to do the equivalent of ${learn}chmod 444 ??${reset}.
Then you have to transform ${code}444${reset} into ${code}644${reset} with ${learn}chmod u+w${reset}.
However the opposite is not possible at all. For example, ${code}u+w${reset} has no numerical equivalent, because the result will depend on the previous permissions.
The two methods are therefore not doing the same thing!
It will be up to you to choose which method you want to use, depending on your situation.
And to finish with the basics on permissions, let's see how to change ownership and group.
The command to use will be: ${code}chown${reset}, abbreviation of: ${code}ch${reset}ange ${code}own${reset}er.
+To put ${voc}root${reset} as the owner of the 'f' file you can simply type: ${learn}chown root f${reset}
!chown root f£No
Here this command does not work! This is again a permission problem, but it is not the same type.
For security reasons, some commands can only be used by the administrator : ${voc}root${reset}.
${code}chown${reset} is one of them, it's a command that only ${voc}root${reset} can use!
But I will not ask you for your password ${voc}root${reset} in GameScript.
I invite you to test this command ${code}chown${reset} later, with root, by yourself in another terminal!
To login in ${code}root${reset} you can do: ${learn}su root${reset}. Your password will then be asked and you will have your terminal in ${code}root${reset}.
To test if you are ${voc}root${reset} you can use the command: ${learn}whoami${reset}.
If you want to change the ${voc}group${reset} with chown, you will have to use the symbol ${code}:${reset}, like ${learn}chown :familyEinstein f${reset}.
And of course you can change owner and group at the same time, such as ${learn}chown albert:familyEinstein f${reset}.
Be careful, however, of all the commands you run in ${voc}root${reset}!
${voc}root${reset} has ALL permissions for ALL items!
${voc}root${reset} is not only able to delete all your files, but it also has the power to make your system unusable!
A clumsy command in ${voc}root${reset}, or a malicious script in ${voc}root${reset} can have devastating effects.
Congratulations, you now master everything you need to analyze and control your permissions.
The quiz is waiting for you!
#clean
