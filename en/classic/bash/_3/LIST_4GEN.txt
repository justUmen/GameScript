#[ -d "$HOME/.GameScript_bash3" ] && echo "Unexpected error, ${HOME}/.GameScript_bash3 already exists on your system! Delete this $HOME/.GameScript_bash3 folder and restart this script." && exit
#mkdir $HOME/.GameScript_bash3 2> /dev/null
#cd $HOME/.GameScript_bash3
In Chapter 2, we saw that the options can have two shapes, one short as in ${learn}ls -l${reset}, and the other long as in ${learn}ls --all${reset}.
If you have several options to pass to the same command, you can put them one after the other: ${learn}ls -a -w 1${reset}.
+Try with this example: ${learn}ls -a -w 1${reset}
!ls -a -w 1£No
Of course you can use the long versions in the same way, or even mix them with short options.
+Try doing the same thing with: ${learn}ls -a --width=1${reset}
!ls -a --width=1£No
But do not forget that the short options start with ${code}-${reset} and the long options start with ${code}--${reset}.
If you use short options, you can also group them with the same ${code}-${reset}.
For example to pass the option ${code}-a${reset} and the option ${code}-w 10${reset} to ${code}ls${reset}, you can type ${code}ls -aw 10${reset}
+Try this command: ${learn}ls -aw 10${reset}
!ls -aw 10£No
Be careful not to forget that there are two ${code}-${reset} before long options.
The ${learn}ls --all${reset} and ${learn}ls -al${reset} commands are not identical at all.
${learn}ls --all${reset} is identical to ${learn}ls -a${reset}.
But ${learn}ls -all${reset} is identical to ${learn}ls -a -l -l${reset}
+Now open the ${code}ls${reset} manual and look for the option to display its version number.
!man ls£No
+Display the version number of ${code}ls${reset}.
!ls --version£No
Perfect !
GameScript is currently displaying text in your device.
GameScript uses the same commands you are currently learning, but can you tell which one is used here to display these sentences?
To display something in a terminal, you will need to use the ${code}echo${reset} command.
This command will simply return an echo of what you gave it as an argument.
+Display the word 'hello' in your terminal with the command: ${learn}echo hello${reset}
!echo hello£No
+The command ${code}echo${reset} can accept several arguments, you can test: ${learn}echo hello everyone${reset}
!echo hello everyone£No
Easy as pie !
We've already seen that ${code}mkdir${reset} is used to create new folders.
But how do we create new files?
Just imagine that you can use the command ${code}echo${reset}!
When you use the ${code}echo${reset} command, the result will be displayed on your device.
But it is also possible to ${voc}redirect${reset} this result elsewhere, for example to a text file.
You will need to use the ${code}>${reset} symbol. It represents a ${voc}redirection${reset} of the result.
+Create the text file 'test' with the command: ${code}echo hello> test${reset}
!echo hello> test£No
When you use ${learn}echo hello> test${reset}, if the file 'test' does not exist, it will be created.
+Display the elements of your working directory.
!ls£No
Here you have not only created the text file 'test', but you also gave it a content.
This content will be the result of the command to the left of the ${code}>${reset} symbol.
To display the contents of this file, you will need to use the command ${code}cat${reset}.
Again, just give ${code}cat${reset} the argument to the name of the file, just as you would for ${code}rm${reset}.
+Display the contents of the 'test' file with: ${learn}cat test${reset}
!cat test£No
The command ${code}cat${reset} has this name because it can be used to make a con${code}cat${reset}enation, which is basically putting chains of character end to end.
To concatenate, just put the files in argument one after the other.
It is also possible to use the same file several times.
+Test the command: ${learn}cat test test${reset}
!cat test test£No
${reset} cat test test${reset} simply displays the contents of the 'test' file twice.
Again: when you use ${code}>${reset}, if the file does not exist it will be created.
However, if the file already exists the content will be replaced.
+Let's test the command: ${learn}echo goodbye> test${reset}
!echo goodbye> test£No
+Now display the contents of the 'test' file.
!cat test£No
Here the content has been replaced! The word 'hello' no longer exists.
Be mindful of ${code}>${reset}, because it can delete the contents of your files.
If you want ${voc}to add${reset} of new content to a file, you will need to use ${code}>>${reset}.
Likewise, if you use ${code}>>${reset}, if the file does not exist it will be created.
But if the file already exists, the new content will be added to the end of the file.
+Test with: ${learn}echo hello >> test${reset}
!echo hello >> test£No
+Then display the contents of the 'test' file.
!cat test£No
Here the word 'hello' has been added at the end of the text file.
You can continue to use ${code}>>${reset} to add new content in the file.
But the redirects (${code}>${reset} and ${code}>>${reset}) are not limited to the command ${code}echo${reset}.
It can work with any command !.
+For example, put the result of the ${learn}ls${reset} command at the end the 'test' file!
!ls>>test£No test
+And display the file 'test'.
!cat test£No
This is the ${voc}result${reset} of the command that will be redirected. Here ${learn}ls${reset} gives as result: 'test', because 'test' is the only element of the current directory.
If you want to add text, you will have to use ${code}>>${reset} in combination with the ${code}echo${reset} command.
If you want to add the word 'pwd' at the end of the file it will be necessary to use: ${learn}echo pwd>>test${reset}
+Add these three letters 'pwd' at the end of the 'test' file.
!echo pwd>>test£No
So be careful not to confuse ${learn}pwd>>test${reset} with ${learn}echo pwd>>test${reset}.
+Now let's add the ${voc}result${reset} of ${code}pwd${reset} at the end of the 'test' file.
!pwd>>test£No test
+And display the file 'test'.
!cat test£No
Very good ! I hope the result does not surprise you.
Now let's go back to the ${code}echo${reset} command.
Some special characters are not easy to display.
+Try to display the letter 'a' and the letter 'b', separated by two spaces with: ${learn}echo a  b${reset}
!echo a  b£No
The result is not what was expected ... There is only one space between a and b.
Here, ${code}echo${reset} considers that there are two arguments, the first argument 'a' and the second argument 'b'.
It therefore displays the two arguments separated by a space.
It is therefore sometimes useful to limit the number of arguments to one!
But how to display this space so that the sequel is not considered as a new argument?
It will be necessary to use what one calls in computer an ${voc}escape character${reset}.
Here it is the character ${code}\\${reset}.
This escape character will affect ${voc}only${reset} the next character.
In our case, to represent a space with the command ${code}echo${reset} we can use ${code}\\\\${reset}.
+Try with this escape character: ${learn}echo a \\\\ b${reset}
!echo a \\ b£No
This time there are two spaces between 'a' and 'b', however there are always two arguments, the first is 'a' and the second is 'b'.
To have a single argument, delete this space after the 'a'.
+Try with one argument: ${learn}echo a\\\\ b${reset}
!echo a\\ b£No
+Now, try to display a second space between a and b.
!echo a\\ \\ b£No
This escape character is very useful for displaying characters that wouldn't show up otherwise.
For example, the ${learn}>${reset} symbol, which as you know, is also interpreted by your terminal as a special character.
+Test this command: ${learn}echo x\\\\>y${reset}
!echo x\\>y£No
Here, you can understand the ${voc} huge ${reset} difference between ${learn}echo x\\>y${reset} and ${learn}echo x>y${reset} .
${learn}echo x>y${reset} will create a new 'y' file with the content 'x'!
${learn}echo x\\\\>y${reset} simply displays text in the terminal.
To display the symbol ${code}\\${reset} with echo, just add it just before your escape character.
+For example, try to display in your terminal: ${code}\\\\exit${reset}.
!echo \\\\\\\\exit£No
In ${code} \\\\\\\\\\\\exit ${reset}, the first ${code} \\ ${reset} is the escape character, but the second one is just the character that must be interpreted literally by your terminal.
To avoid having to use this ${code} \\ ${reset} for each space, you can also use ${code}\\ "${reset}.
Two ${code}\\"${reset} can act as a ${code}delimiter${reset} of arguments.
That is, ${learn}echo x\\>y${reset} can be replaced by ${learn}echo \\"x>y\\"${reset}.
The content between the first ${code}\\"${reset} and the second ${code}\\"${reset} will be considered as a single argument to the command ${code}echo${reset}.
As part of the argument, spaces will be treated and displayed as such.
+Try doing: ${learn}echo \\"X  X\\"${reset}
!echo \\"X  X\\"£No
Here, the spaces are displayed correctly.
+You can also replace the ${code}\\"${reset} by ${code}'${reset}. Do so with the ${learn}echo 'X   X'${reset}
!echo 'X   X'£No
If you have many ${code}'${reset} to display, I advise you to use the ${code}\\"${reset} as the delimiter, and if you have lots of ${code}\\"${reset} to display, I advise you to use ${code}'${reset} as the delimiter.
For example, even if the display is equivalent, ${learn}echo '\\"Peter\\" and \\"Mary\\"'${reset} is more readable than ${learn}echo \\"\\\\\\\"Peter\\\\\\\" et \\\\\\\"Mary\\\\\\\"\\"${reset}
The ${voc}escape character${reset} ${code} \\ ${reset} can also be used to display other special characters, such as line breaks or tabs.
+Quickly look at this list in the command manual ${code}echo${reset}.
!man echo£No
If you have read the manual correctly, you understand that it will only work if the ${code}-e${reset} option is present.
The letter 'n' is used with ${code} \\ ${reset} to represent a new line, 'n' as ${code}n${reset} new line.
+Display the letter 'a' then the letter 'b' on a new line using the ${code}'${reset} as delimiters.
!echo -e 'a\\nb'£No
+Find the syntax of a ${var}${reset} tab ${} tab in the ${code}echo${reset} command manual.
!man echo£No
+Using the ${code}'${reset}, display the letter 'a', followed by a tab, and then the letter' b '.
!echo -e 'a\\tb'£No
+Now instead of displaying the result in the terminal, put it in a file with named 'tab'.
!echo -e 'a\\tb'>tab£No
+Display the contents of the 'tab' file.
!cat tab£No
+Now display the 'test' file with the 'tab' file in one command.
!cat test tab£No
+Now delete 'tab' and 'test' in one command.
!rm tab test£No
Excellent! You are ready for the quiz.
#clean
