#[ -d "$HOME/.GameScript_bash4" ] && echo "Unexpected error, ${HOME}/.GameScript_bash4 already exists on your system! Delete this $HOME/.GameScript_bash4 folder and restart this script." && exit
#mkdir $HOME/.GameScript_bash4 2> /dev/null
#cd $HOME/.GameScript_bash4
In the previous chapter, we saw together how to create and edit text files.
Here we will continue with other types of controls.
+Let's start by creating a new file 'test' with as content the word 'hello'.
!echo hello> test£No
+Create a new folder named 'DIR'.
!mkdir DIR£No
+Display the elements of the current directory.
!Ls£No
To move a file you will have to use the command ${code}mv${reset}.
As a reminder : 'm' and 'v' are the consonants of the word 'move'.
+Move this 'test' file to the DIR folder with the command: ${learn}mv test DIR${reset}
!mv test DIR£No
+Display the elements of the folder 'DIR'.
!ls DIR£No
+Move your terminal inside the 'DIR' folder.
!cd DIR£No
+Display the absolute path of the current directory.
!pwd£No
+Display the elements of the current directory.
!ls£No
You moved the file 'test' in the directory 'DIR' with this command: ${learn}mv test DIR${reset}
In this example, our first argument is a file and the second is a folder.
Since the second argument is a file, the command could have been: ${learn}mv test DIR/${reset}
This version is much more readable than the first.
But you should be careful, because ${code}mv${reset} can have either files or folders as arguments.
If the first argument is a file and the second is not a folder, the command will act differently : this time the first argument will be ${voc}renamed${reset}.
Be careful to understand your environment, you should know what are the files and folders in your current location.
In your current directory you still have this file 'test'.
+Use this command to rename 'test' to 'test2' : ${learn}mv test test2${reset}
!mv test test2£No
+Display the elements of the current directory.
!ls£No
+Display the contents of the file 'test2'.
!cat test2£No
The content is always the same, only the name of the file has changed.
+Now create a new folder named: 'DOS'.
!mkdir DOS£No
I repeat, ${code}mv${reset} can have files or folders as arguments.
If the first argument is a folder, and the second one does not exist, then ${code}mv${reset} will just rename the folder given as the first argument.
+Rename the folder 'DOS' in 'DOS2'.
!mv DOS DOS2£No
+And display the elements of the current directory.
!ls£No
So be careful with the command ${code}mv${reset}, it can have two different roles : move and rename.
${code}mv${reset} can also do both in one command !
+Move 'test2' to the 'DOS2' folder and rename it to 'test3' with : ${learn}mv test2 DOS2 / test3${reset}
!mv test2 DOS2/test3£No
+Display the elements of the DOS2 directory.
!ls DOS2£No
The file 'test2' has been moved to DOS2 and renamed to 'test3'.
+Display the content of this 'test3' file.
!cat DOS2/test3£No
The content is obviously still the same.
If you try add the text 'everyone' after this file like we did before, this word will be added on a separate line.
Because when you use ${code}echo${reset}, it will automaticaly add a new empty line at the end.
If you do not want this new empty line, you will have to use the ${learn}-n${reset} option of the ${code}echo${reset} command.
+Replace the contents of the file 'test3' with 'hello', but without this new empty line.
!echo -n hello>DOS2/test3£No
+Now add the text 'everyone' to this file 'test3', using ${learn}\\"${reset}.
!echo \\"everyone\\">>DOS2/test3£No
+And finally, display the content of 'test3'.
!cat DOS2/test3£No
And here it is : hello everyone!
When a command doesn't do exactly what you want it to do, visit its manual !
It is very likely that a simple option is the answer to your problem.
${code}mv${reset} uses two arguments, the first is ${voc}<SOURCE>${reset} and the second is ${voc}<DESTINATION>${reset}.
And the syntax as we have already seen is : ${code}mv <SOURCE> <DESTINATION>${reset}
${voc}<SOURCE>${reset} and ${voc}<DESTINATION>${reset} should be replaced by the desired files or folders.
When a commands has two arguments, most of the time this logic (${code}<COMMAND> <SOURCE> <DESTINATION>${reset}) applies.
The first argument of the command is the ${voc}source${reset}, the second is the ${voc}destination${reset}.
To ${voc}copy${reset} or ${voc}duplicate${reset} a file, you will have to use the command ${code}cp${reset}.
Its behavior is roughly the same as ${code}mv${reset}, except that the ${voc}<SOURCE>${reset} file will not be deleted.
+Display the elements of the current directory.
!ls£No
+Copy the file 'test3' in your current directory.
!cp DOS2/test3 .£No
And here we have our first practical use of ${code}.${reset}, which I remind you represents the current directory.
+List the elements of the current directory again.
!ls£No
Again ${code}.${reset} being a folder, you can also use ${code}./${reset} instead.
+Now test this command: ${learn}cp DOS2/test3 .new${reset}
!cp DOS2/test3 .new£No
+Then list the elements of the current directory.
!ls£No
This result shouldn't be strange for you.
Again, ${code}.new${reset} and ${code}./new${reset} represent two different things.
${code}.new${reset} is obviously a hidden file, because it starts with a dot.
+List the hidden files in the current directory to find it.
!ls -a£No
If you want to copy the file 'test3' and rename this copy to 'new' in the current directory, the command would be: ${learn}cp DOS2/test3 ./new${reset}.
Here the ${learn}cp command DOS2/test3 .new${reset} is identical to ${learn}cp DOS2/test3 ./.new${reset}.
It is also possible to have several commands on a single line, you just have to separate them by ${code};${reset}.
+Try showing 'a', then another line 'b'. With two commands and a ${code};${reset}.
!echo a;echo b£No
+Now, try to move to the DOS folder and create a NEW folder inside.
!cd DOS;mkdir NEW£No
+List the items in your current directory.
!ls£No
With ${code};${reset}, whatever the result of the first command is, the second one will be launched.
Here the folder 'DOS' did not exist, however the command ${learn}mkdir NEW${reset} was started in ${code}.${reset}.
The ${code};${reset} gives no control over the status of previous commands.
But you can also create conditions before moving on to the next command.
If you want the second command to run only if the first command was successful, you can use ${code}&&${reset} instead of ${code};${reset}.
+First remove this NEW folder, which we mistakenly created in the wrong directory.
!rmdir NEW£No
+Now, to create a NEW folder in DOS, try: ${learn}cd DOS&&mkdir NEW${reset}
!cd DOS && mkdir NEW£No
+List the items in your current directory.
!ls£No
Because the command ${learn}cd DOS${reset} returned an error, ${code}&&${reset} has blocked the execution of the next command.
This technique is especially important if you use destructive ${voc}commands${reset}, like ${code}rm${reset}, or ${code}echo${reset} with ${code}>${ reset}.
If you do not take precautions, you may accidentally delete an important file !
You can use ${code};${reset} and ${code}&&${reset} with all the commands you already know.
But there is another syntax : ${code}||${reset}, which is the opposite of ${code}&&${reset}.
That is, the next command will only start if the previous command fails.
+Try with a typo the command: ${learn}lss||echo test${reset}
!lss||echo test£No
+Try the same command, this time with ${code}&&${reset}: ${learn}lss&&echo test${reset}
!lss&&echo test£No
But it is also possible to have both conditions on one line.
+Try this command: ${learn}cd DOS&&echo SUCCESS||echo ERROR${reset}
!cd DOS&&echo SUCCESS||echo ERROR£No
If you already know how to program, this command can be seen as an if/else programming condition.
+Here the folder 'DOS' does not exist, so use DOS2 with this command: ${learn}cd DOS2&&ls||pwd${reset}
!cd DOS2&&ls||pwd£No
Because the 'DOS2' folder exists, the ${learn}pwd${reset} command will not be executed.
You are ready for the questionnaire!
#clean
