#[ -d "$HOME/.GameScript_bash4" ] && echo "Erreur innatendu, ${HOME}/.GameScript_bash4 existe déjà sur votre système ! Supprimez ce dossier $HOME/.GameScript_bash4 et relancer ce script." && exit
#mkdir $HOME/.GameScript_bash4 2> /dev/null
#cd $HOME/.GameScript_bash4
In the previous chapter, we saw how to create and edit text files.
Here we will continue with other types of controls.
+Let's start by creating a new file 'test' with as content the word 'hello'.
!echo hello> test£No
+Create a new folder named 'DIR'.
!mkdir DIR£No
+Display the elements of the current directory.
!Ls£No
To move a file it will be necessary to use the command ${code}mv${reset}.
'm' and 'v' are the consonants of 'move', the English word for 'move'.
+Move this 'test' file to the DIR folder with the command: ${learn}mv test DIR${reset}
!mv DIR test£No
+Display the elements of the folder 'DIR'.
!ls DIR£No
+Move your terminal to the 'DIR' folder.
!cd DIR£No
+Display the absolute path of the current directory.
!Pwd£No
+Display the elements of the current directory.
!Ls£No
Here the file 'test' has been moved to the directory 'DIR' with this command: ${learn}mv test DIR${reset}
In this example, our first argument is a file and the second is a folder.
Since the second argument is a file, the command could have been: ${learn}mv test DIR /${reset}
This version is much more readable than the first.
Because ${code}mv${reset} can have either files or folders in arguments.
But if the first argument is a file and the second is not a folder, the command will act differently: this time the first argument will be ${voc}renamed${reset}.
Be careful to understand your environment.
In your current directory you always have this file 'test'.
+Use this command to rename 'test' to 'test2': ${learn}mv test test2${reset}
!mv test test2£No
+Display the elements of the current directory.
!Ls£No
+Display the contents of the file 'test2'.
!cat test2£No
The content is always the same, only the name of the file has changed.
+Now create a new folder named: 'DOS'.
!mkdir DOS£No
I repeat, ${code}mv${reset} can have arguments or files as well.
That is, if the first argument is a folder, and the second one does not exist, then ${code}mv${reset} will just rename the folder as an argument.
+Rename this folder 'DOS' in 'DOS2'.
!mv DOS DOS2£No
+And display the elements of the current directory.
!Ls£No
So be careful with the command ${code}mv${reset} which can have two different roles: move and rename.
${code}mv${reset} can also do both in one command.
+Move 'test2' to the 'DOS2' folder and rename it to 'test3' with: ${learn}mv test2 DOS2 / test3${reset}
!mv test2 DOS2 / test3£No
+Display the elements of the DOS2 directory.
!ls DOS2£No
The file 'test2' has been moved to DOS2 and renamed to 'test3'.
+Display the contents of this 'test3' file.
!cat DOS2 / test3£No
The content is always the same.
If you add the text 'everyone' after this file, the text will be added to a new line.
Because when you use ${code}echo${reset}, it will add a new line by the end.
If you do not want this line, you will have to use the ${learn}-n${reset} option of the ${code}echo${reset} command.
+Replace the contents of the file 'test3' with 'hello', but without this return to the automatic line at the end.
!echo -n hello> DOS2 / test3£No
+Now add the text 'everyone' to this file 'test3', using ${learn}\\ "${reset}.
!echo \\ "everyone \\" >> DOS2 / test3£No
+And finally, display the content of 'test3'.
!cat DOS2 / test3£No
And here, hello everyone!
When an order does not do exactly what it wants to do, visit its manual!
It is very likely that a simple option is the answer to your problem.
${code}mv${reset} uses two arguments, the first is ${voc}<SOURCE>${reset} and the second is ${voc}<DESTINATION>${reset}.
And the syntax as we have already seen is: ${code}mv <SOURCE> <DESTINATION>${reset}
${voc}<SOURCE>${reset} and ${voc}<DESTINATION>${reset} should be replaced by the desired files or folders.
When an order needs two arguments, most of the time this logic applies.
The first argument is the ${voc}source${reset}, the second is the ${voc}destination${reset}.
For ${voc}to copy${reset} or ${voc}to duplicate${reset} a file, it will be necessary to use the command ${code}cp${reset}.
Its behavior is roughly the same as ${code}mv${reset}, except that the ${voc}<SOURCE>${reset} file will not be deleted.
+Display the elements of the current directory.
!Ls£No
+Copy the file 'test3' in your current directory.
!cp DOS2 / test3.£No
And here we have our first practical use of ${code}.${reset}, which I remind you represents the current directory.
+List the elements of the current directory again.
!Ls£No
Again ${code}.${reset} being a folder, you can also use ${code}./${reset} instead.
+Now test this command: ${learn}cp DOS2 / test3 .new${reset}
!cp DOS2 / test3 .new£No
+Then list the elements of the current directory.
!Ls£No
This result should not shock you.
Again, ${code}.new${reset} and ${code}./ new${reset} represent two different things.
${code}.new${reset} is obviously a hidden file.
+List hidden files in the current directory.
!ls -a£No
If you want to copy the file 'test3' and rename this copy to 'new' in the current directory, the command would be: ${learn}cp DOS2 / test3 ./new${reset}.
Here the ${learn}cp command DOS2 / test3 .new${reset} is identical to ${learn}cp DOS2 / test3 ./.new${reset}.
It is also possible to have several commands on a single line, it is enough to separate them by ${code};${reset}.
+Try showing 'a', then another line 'b'. With two commands and a ${code};${reset}.
!echo a; echo b£No
+Now, try to move to the DOS folder and create a NEW folder inside.
!cd DOS; mkdir NEW£No
+List the items in your current directory.
!Ls£No
With ${code};${reset}, whatever the result of the first command, the second one will start.
Here the folder 'DOS' did not exist, however the command ${learn}mkdir NEW${reset} was started in ${code}.${reset}.
The ${code};${reset} gives no control over the status of previous commands.
But you can also create conditions before moving on to the next order.
If you want the second command to run only if the first command was successful, you can use ${code}&&${reset} instead of ${code};${reset}.
+First remove this NEW folder, which we mistakenly created in the wrong directory.
!rmdir NEW£No
+Now, to create a NEW folder in DOS, try: ${learn}cd DOS && mkdir NEW${reset}
!cd DOS && mkdir NEW£No
+List the items in your current directory.
!Ls£No
Because the command ${learn}cd DOS${reset} returns an error, ${code}&&${reset} has blocked the launch of the next command.
This technique is especially important if you use destructive ${voc}commands${reset}, like ${code}rm${reset}, or ${code}echo${reset} with ${code}> ${ reset}.
If you do not take precautions, you may accidentally delete an important file.
You can use ${code};${reset} and ${code}&&${reset} with all the commands you already know.
But there is another syntax: ${code}||${reset}, which is the opposite of ${code}&&${reset}.
That is, the next command will only start if the previous command fails.
+Try with a typo the command: ${learn}lss || echo test${reset}
!lss || echo test£No
+Try the same command, this time with ${code}&&${reset}: ${learn}lss && echo test${reset}
!lss && echo test£No
But it is also possible to have both conditions on one line.
+Try this command: ${learn}cd DOS && echo SUCCESS || echo ERROR${reset}
!cd DOS && echo SUCCESS || echo ERROR£No
If you already know how to program, this command can be seen as an if / else programming condition.
+Here the folder 'DOS' does not exist, so use DOS2 with this command: ${learn}cd DOS2 && ls || pwd${reset}
!cd DOS2 && ls || pwd£No
Since the 'DOS2' folder exists, the ${learn}pwd${reset} command will not be executed.
You are ready for the questionnaire!
#clean
