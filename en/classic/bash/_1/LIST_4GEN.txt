#[ -d "$HOME/House" ] && echo "Unexpected error, ${HOME}/House already exists on your system! Delete this $HOME/House folder and restart this script." && exit
#mkdir $HOME/.GameScript_bash1 &> /dev/null
#cd $HOME/
Hello everyone and welcome to the first chapter about 'bash'.
Before learning about our first command, we need to understand the logic behind the organisation of files and folders in Unix-like operating systems, like Linux.
Let's start to talk about 'directories', also known as 'folders'.
#real_tree_1
You can picture the organization of files and folders as a tree.
In this tree, the folders are shown in sky blue.
At the bottom of the tree you have the symbol ${code}/${reset} which represents the ${voc}root directory${reset}.
It is a special folder that will contain ALL the other folders of the system.
#real_tree_2
In this tree, everytime you see a new branch, it represents a new folder.
This passage to another branch can also be seen in their names with the appearance of an additional symbol '/'.
For example, ${code}/home/${reset} represent the folder 'home' in the ${voc}root directory${reset}.
${code}/home/user/${reset} represent the directory 'user', which is in the directory 'home', which is itself in the ${voc}root directory${reset}.
And so on, like for example : ${code}/home/user/Images/${reset}
In this case, 'Images' is in 'user', 'user' is in 'home' and 'home' is in '/'.
But be careful, having a '/' at the end of the last folder isn't mandatory.
It means that ${learn}/home/user/${reset} is equivalent to ${learn}/home/user${reset}.
Also, ${learn}/home/${reset} and ${learn}/home${reset} are equivalent.
#real_tree_3
Now let's talk about the files, here in my tree they are in green. In my example, files are 'leaves'. They are connected to a branch, or even sometimes to the trunk itself.
These files belong to a folder. But here, we have some problems: in red, we can see files that can't exist...
${codeError}file1${reset} can't exist because there is already a file with the same name in the same directory. Here the root directory : ${learn}/file1${reset}
But above it, the other file ${codeFile}/home/file1${reset} can exist, because even if their name is the same, they are not directly in the same folder.
The elements in a Unix-like operating system should have a unique reference : here ${learn}/file1${reset} and ${learn}/home/file1${reset} are not in conflit.
The file ${codeError}/home${reset} can't exist either, because there is already a folder ${code}/home/${reset}, that is using the same name in the same place.
For these files to exist, we must give them different names.
#real_tree_4
Here we just have to call the second file : 'file2'.
For ${codeError}home${reset}, we need to give another name that won't be a problem : like for example 'Home'.
Yes ! On Unix, uppercase letters are important. 'Home' and 'home' are two different names.
When the uppercase letters are considered different from the lowercase letters, we say that the computer system is ${voc}case sensitive${reset}.
Indeed, Unix-like Operating Systems are ${voc}case sensitive${reset}. It means that 'home', 'Home', 'hOme', 'hoMe', 'homE', 'HoMe', 'hOmE', 'HOme', 'hoME', 'HomE', 'hOMe', 'HOME', etc... are all different and valid names !
#tree_1
It is also possible to represent the same folders this way.
#tree_2
And here is the same example with files. Identical to the tree we saw earlier.
#tree_3
But the structure can also be understood without the tree-like format.
If all of this isn't obvious for you now, don't worry.
Now that you understand the logic, with time and repetition, it will soon be easy for you.
This kind of line, which start with the ${voc}root directory${reset} '/', is called the ${voc}absolute path${reset} of a folder or file.
It represents with precision, the targeted file or folder.
Here, it is impossible to have two identical lines.
This ${voc}absolute path${reset} is the most important concept of the command line.
Now we can see our first command !
Let's start by creating a new folder with the command ${learn}mkdir${reset} (This command's name comes from the sentence : ${learn}m${reset}a${learn}k${reset}e ${learn}dir${reset}ectory).
You just have to type 'mkdir', followed by a space and a name for your folder.
+Now let's create the folder 'House', with : ${learn}mkdir House${reset}, and confirm the command by pressing the Return key.
!mkdir House£Non
+Let's now display the folders and files, with a simple ${learn}ls${reset} (ls comes from the word : ${learn}l${reset}i${learn}s${reset}t).
!ls£Non
You should see the folder you've created.
Now we can go inside that folder with the command ${learn}cd${reset} (cd comes from ${learn}c${reset}hange ${learn}d${reset}irectory).
+To do that, we just have to do ${code}cd${reset}, followed by the name of the folder, in our case : ${learn}cd House${reset}.
!cd House£Non
+Now, let's display the files and folders again with a simple ${learn}ls${reset}.
!ls£Non
Here the directory 'House' is empty, it's normal, because you've just created it.
But, what about the ${voc}absolute path${reset} I talked about before ?
In fact, a terminal is always running in a folder, and can 'move' in the system tree.
It's exactly what you did with the command ${learn}cd House${reset}, you moved the terminal in the folder 'House'.
+To know in which directory your terminal is right now, you just have to type ${learn}pwd${reset} (pwd comes from ${learn}P${reset}rint ${learn}W${reset}orking ${learn}D${reset}irectory).
!pwd£Non
The result you see here is the ${voc}absolute path${reset} of the folder you are currently in.
This folder, where you are right now, has a special name : it's your ${voc}working directory${reset}, also called ${voc}current directory${reset}.
Like I said before, it is not mandatory to put a '/' for the last folder, that's why you can see here, ${learn}$(pwd)${reset}, without a '/' at the end.
So here you have 4 fundamental Unix commands : ${learn}pwd${reset}, ${learn}ls${reset}, ${learn}cd${reset} and ${learn}mkdir${reset}.
${learn}pwd${reset} and ${learn}ls${reset} are very safe to use, because they just display informations.
So don't hesitate to use them extensively, as soon as you are in a terminal.
${learn}pwd${reset}, to know what is your ${voc}current directory${reset}.
And ${learn}ls${reset}, to display the content of your ${voc}current directory${reset}.
+Now let's create a new folder, called 'Room', in our ${voc}current directory${reset}, with : ${learn}mkdir Room${reset}
!mkdir Room£Non
+Change your ${voc}current directory${reset} with : ${learn}cd Room${reset}
!cd Room£Non
+Now, try the command to display the absolute path of your ${voc}current directory${reset} !
!pwd£Non
+Awesome, now let's display the elements of your ${voc}current directory${reset} !
!ls£Non
Here the folder is empty, but you already understand two important commands : ${learn}pwd${reset} and ${learn}ls${reset}.
The commands ${learn}cd${reset} and ${learn}mkdir${reset} are more complex.
They need a target or a name, like for example : ${learn}mkdir Room${reset}.
This 'target' is called an ${voc}argument${reset} !
But it's also possible to use commands with multiple ${voc}arguments${reset}.
You just have to separate them with spaces.
+Create the folders 'bed', 'closet' and 'desk' with a single command : ${learn}mkdir bed closet desk${reset}
!mkdir bed closet desk£Non
+Display the elements of the ${voc}current directory${reset}.
!ls£Non
+Now to delete these folders, you can do : ${learn}rmdir bed closet desk${reset}. (rmdir comes from ${learn}r${reset}e${learn}m${reset}ove ${learn}dir${reset}ectory)
!rmdir bed closet desk£Non
${learn}rmdir${reset} is a rather innoffensive command, because it will refuse to delete a folder if it isn't empty.
That can prevent accidents. If for example, you did ${learn}rmdir /home${reset} by mistake.
${learn}rm${reset} is the command to delete files. (rm comes from the word ${learn}r${reset}e${learn}m${reset}ove)
#touch virus0 virus1 virus2 virus3 virus4
Just like ${learn}mkdir${reset}, you need to give it an ${voc}argument${reset} : the name of the file you want to target, for example : ${learn}rm test${reset}.
+Something strange just happened... Display the content of your ${voc}working directory${reset}.
!ls£Non
+${code}rmdir${reset} deleted the folders successfully. But these files have nothing to do here ! Delete the file 'virus1' with : ${learn}rm virus0${reset}
!rm virus0£Non
+Display again the elements of the ${voc}current directory${reset}, to see if 'virus0' is still there.
!ls£Non
Awesome, 'virus0' doesn't exist anymore.
But be careful with ${learn}rm${reset}, it is a very dangerous command, and you shouldn't take it lightly !
The files are deleted, they won't go in a recyclebin, so be careful.
A mistake using command line can be unforgiving.
A mispell or a wrong ${voc}current directory${reset} can have severe consequences.
Before confirming a command, be sure of what you are doing.
Never hesitate to launch and relaunch ${learn}pwd${reset} and ${learn}ls${reset}, to know what is your ${voc}current directory${reset} and check its content.
But for now we have more 'viruses' to delete. And we can remove them differently.
We can use their ${voc}absolute path${reset}.
#cd ~/
When you did ${learn}rm virus0${reset}, you've asked for the deletion of the file 'virus0' in your ${voc}current directory${reset}.
+I've just changed your current directory, display it now.
!pwd£Non
+Display the content of your ${voc}current directory${reset}.
!ls£Non
The file 'virus1' still exists in the folder 'Room', but with your ${voc}current directory${reset}, you can't do ${learn}rm virus1${reset}.
Hopefully, you know the ${voc}absolute path${reset} of the file 'virus1' : ${learn}$HOME/House/Room/virus1${reset}
You can use its ${voc}absolute path${reset} as an argument. And this command will work regardless of your ${voc}current directory${reset} !
+Delete 'virus1' with : ${learn}rm $HOME/House/Room/virus1${reset}.
!rm $HOME/House/Room/virus1£Non
Now, how can we check if the file was deleted ?
When a command doesn't go as planned, it will display an error.
+Try to delete the file 'virus1' again with its ${voc}absolute path${reset}.
!rm $HOME/House/Room/virus1£Non
Here the command ${learn}rm${reset} is displaying an error, because the file you want to delete doesn't exist.
We can also use the ${voc}absolute path${reset} of the folder 'Room' to display its content.
You already know the command ${learn}ls${reset}, to display the content of your ${voc}current directory${reset}.
Without ${voc}argument${reset}, with a simple ${learn}ls${reset}, the targetted folder will be the ${voc}current directory${reset}.
But it is also possible to give an ${voc}argument${reset} to ${learn}ls${reset}.
This ${voc}argument${reset} is the targeted folder, for example ${learn}ls /${reset}, will display the content of the ${voc}root directory${reset}.
+We can display the content of the folder 'Room', without having to move in this directory first, with : ${learn}ls $HOME/House/Room/${reset}.
!ls $HOME/House/Room/£Non
Excellent, the file 'virus1' no longer exists.
Once again, I want to remind you that in an ${voc}absolute path${reset}, if the last character is '/', it's not mandatory.
+So here the last '/' in ${learn}$HOME/House/Room/${reset} isn't mandatory. Test with this command : ${learn}ls $HOME/House/Room${reset}
!ls $HOME/House/Room£Non
No problem there, the result is identical for both commands : ${learn}ls $HOME/House/Room/${reset} and ${learn}ls $HOME/House/Room${reset}.
When you did ${learn}rm virus0${reset} for the first deletion, you used what's called the ${voc}relative path${reset}.
We say that this path is 'relative' because it depends on your ${voc}working directory${reset}.
Let's imagine two 'virus' files : with their ${voc}absolute path${reset} being : ${learn}/virus${reset} and ${learn}/bin/virus${reset}.
If ${learn}pwd${reset} is displaying ${learn}$HOME${reset}. A ${learn}rm virus${reset} won't delete any of them, but would try to remove the file ${learn}$HOME/virus${reset}.
#cd "$HOME"
This is why this ${voc}absolute path${reset} is very important. You can do ${learn}rm /virus${reset}, or ${learn}rm /bin/virus${reset}, and it will work whatever your ${voc}current directory${reset} is.
+I just changed your ${voc}current directory${reset}, display it.
!pwd£Non
To change your ${voc}current directory${reset}, you can use the command ${learn}cd${reset}.
To go back in the folder 'Room', you can use its ${voc}absolute path${reset} : ${learn}cd $HOME/House/Room/${reset}
But you can also do the same thing using its ${voc}relative path${reset}.
You want to move in ${learn}$HOME/House/Room/${reset}, and you already are in ${learn}$HOME${reset}.
+It is therefore possible to move from where you are now, with : ${learn}cd House/Room/${reset}. Go ahead, try it.
!cd House/Room/£Non
+Display the elements of your ${voc}working directory${reset}.
!ls£Non
+Here you can still see some 'virus' files. Delete the file 'virus2' using its ${voc}relative path${reset}.
!rm virus2£Non
Excellent!
In the last example, we saw that ${learn}cd House/Room/${reset} is using a ${voc}relative path${reset}, but this path still contains several '/'.
So how can we know if a path is an ${voc}absolute path${reset} or a ${voc}relative path${reset} ?
The ${voc}absolute path${reset} is in fact very easy to recognize !
It always starts at the root directory, it means that the first character of an ${voc}absolute path${reset} is always a '/'.
There is also a very useful syntax you can use with the ${voc}relative path${reset} : ${learn}..${reset}
${learn}..${reset} represents the parent folder of your ${voc}current directory${reset}.
It is the vocabulary we will use to talk about this tree, they have child / parent relationships.
For example, for ${learn}/home/user/test/${reset}, the parent folder of 'test' is 'user', and the parent of 'user' is 'home'.
And of course, 'test' is a child of 'user', and 'user' is a child of 'home'.
Targetting children in ${voc}argument${reset} with their ${voc}relative path${reset} is very simple, you just have to write the names of their successive parents.
Like for example with the command we used before : ${learn}cd House/Room/${reset}
To target parents, it's a little more complicated. We have to use these ${learn}..${reset}.
+Display the absolute path of you current directory.
!pwd£Non
You already know the command to change your current directory : ${learn}cd${reset}.
Here we want to move in the parent folder. We are in ${learn}$HOME/House/Room/${reset} and we want to go in ${learn}$HOME/House/${reset}
+It is possible to go up one branch in the tree, or like i said before to move in the parent folder with : ${learn}cd ..${reset}
!cd ..£Non
+Display the absolute path of the current directory.
!pwd£Non
I hope that the result of ${learn}pwd${reset} makes sense for you.
+But we have two more viruses to get rid of, delete 'virus3' with its ${voc}relative path${reset}.
!rm Room/virus3£Non
+Good ! Now delete the file 'virus4' with its ${voc}absolute path${reset}.
!rm $HOME/House/Room/virus4£Non
Amazing, you got it ! Try to confirm your knowledge with the quiz now.
#clean
