# [-d "$HOME/.GameScript_bash2"] && echo "Unexpected error, ${HOME}/.GameScript_bash2 already exists on your system! Delete this $HOME/.GameScript_bash2 folder and restart this script." && exit
#mkdir $HOME/.GameScript_bash2 2> /dev/null
#cd $HOME/.GameScript_bash2
#touch $HOME/.GameScript_bash2/bOb
In the last chapter, we saw the use of some commands and their arguments.
The command ${learn}cd${reset} allows us for example to move in the directory of our choice.
But we must give our choice in ${voc}argument${reset} of this command, for example ${learn}cd test${reset} to go in the 'test' folder.
Or ${learn}mkdir test${reset} to create a directory that will be called 'test'.
The syntax is: ${voc}<COMMAND> <ARGUMENT>${reset}.
This ${voc}<ARGUMENT>${reset} can be a ${voc}relative path${reset}, like a folder in the ${voc}current directory${reset} with for example: ${learn}mkdir NewFolder${reset}
This ${voc}<ARGUMENT>${reset} can also be an ${voc}absolute path${reset}, like a file in the ${voc}root directory${reset} with for example: ${learn}rm /file${reset}
But do you remember the commands we have already seen?
+Try to display items from your current directory.
!ls£No
+Now display the contents of your parent directory.
!ls ..£No
${code}..${reset} is the abbreviation of a directory, so it can also be written ${code}../${reset}
+So test: ${learn}ls ../${reset}
!ls ../£No
The result of ${learn}ls ../${reset} is equivalent to the result of the previous command: ${learn}ls ..${reset}
${code}..${reset} being a directory, it can also have a parent, which can be targeted by ${code}../..${reset} or ${code}../ .. /${reset}.
${code}../..${reset} therefore targets the large parent of the current directory.
${code}../../..${reset} targets its great grandparent, and so on.
But there is another special name, which represents the current directory: this is the ${code}.${reset}.
Since this is a folder, ${code}./${reset} is also a correct syntax.
We have already seen that ${code}ls${reset} could have an argument, like ${learn}ls /${reset}.
+Give the current directory as an argument to ${code}ls${reset} with: ${learn}ls.${reset}
!ls.£No
+And now make ${learn}ls ./${reset}
!ls ./No
These two commands give the same result as a simple ${learn}ls${reset}.
Without argument, the ${learn}ls${reset} command defaults to ${code}.${reset}.
+To delete this file 'bOb', you can for example type ${learn}rm ./bOb${reset}, go ahead.
!rm ./bOb
There is no error message, it means that the command worked well.
+Let's check the contents of the current directory.
!ls£No
+Perfect, it does not exist anymore. Now display the current directory path.
!Pwd£No
Be careful with this symbol ${code}.${reset}, here it has another meaning.
This '.' in '.GameScript_bash2' does not refer to the current directory at all, that '.' is simply part of the file name.
The full name of the folder is '.GameScript_bash2'.
+Now create a new 'child' folder in the current directory.
!mkdir child£No
+Move to this 'child' folder you just created.
!cd child£No
+Display the current directory path.
!Pwd£No
+Now move to your grandparent directory using its relative path.
!cd ../..£No
+Redisplay the path of the current directory.
!Pwd£No
You are now in the directory where the '.GameScript_bash2' folder is located.
But if you try to display the items in your current directory, you will not see it.
+Try to display it with: ${learn}ls${reset}.
!ls£No
On a Unix-like operating system, such as Linux, if a file name or folder name begins with a ${code}.${reset}, this item will be ${voc}hidden${reset}.
Here it is not in the ${learn}ls${reset} command, though it does exist.
But how can you show the hidden folder '.GameScript_bash2'?
Most commands may have special arguments, which give more details to this command.
These special arguments start with a ${code}-${reset} and are named ${voc}options${reset}.
+In order for ${learn}ls${reset} to also display${reset} ${voc}hidden elements, you will have to do ${learn}ls -a${reset}, go ahead.
!ls -a£No
Here you should be able to see the ${code}.GameScript_bash2${reset} folder, but also many other hidden ${voc}items${reset}.
Traditionally, these ${voc}${reset} options are placed before normal arguments.
The syntax will be ${voc}<COMMAND> <OPTION> <ARGUMENT_NORMAL>${reset} as for example ${learn}ls -a /${reset}.
Now how to get back to this folder ${code}.GameScript_bash2${reset}?
It is possible to return to this folder with a simple ${learn}cd .GameScript_bash2${reset}.
+But it is also possible to move in this directory with: ${learn}cd ./.GameScript_bash2${reset}, so try this command.
!cd ./.GameScript_bash2£No
I hope the difference between these two ${code}.${reset} in this command is obvious to you.
${code}.${reset} /. GameScript_bash2: This '.' represents the current directory.
./${code}.${reset}GameScript_bash2: This '.' makes this file a hidden file.
+Redisplay hidden {{void}${reset} items and items in your new current directory.
!ls -a£No
You can see here the two special references we just saw: ${code}.${reset} and ${code}..${reset}
These two hidden folders, ${code}.${reset} and ${code}..${reset}, are present in all folders.
Since we are talking about repertoire with special symbols, we can also talk about the ${code}~${reset}.
The ${code}~${reset} represents the user's ${voc}home directory${reset}.
Most often this directory is named after the user in the folder ${code}/ home /${reset}.
In your case, ${code}~${reset} replaces this path: ${code}$HOME${reset}.
You can obviously use this ${code}~${reset} as an argument with your commands.
+Go to this directory with ${learn}cd ~${reset}
!cd ~£No
+Now check your new current directory.
!Pwd£No
${code}~${reset} replaces in your case this absolute path: ${code}$HOME${reset}
To target '.GameScript_bash2', you can use as a relative path ${code}.GameScript_bash2${reset} or ${code}./.GameScript_bash2${reset}
But you can also, using ${code}~${reset}, use a new absolute path: ${code}~/.GameScript_bash2${reset}
+Delete the 'child' folder you created in '.GameScript_bash2' using its relative path.
!rmdir .GameScript_bash2/child£No
+Now go to the root directory.
!cd /£No
+Now delete the ${code}.GameScript_bash2${reset} folder using its absolute path and the symbol ${code}~${reset}!
!rmdir ~/.GameScript_bash2£No
Perfect !
Now let's go back to the commands and more precisely on their ${voc}options${reset}.
+List all items in the current directory with ${learn}ls -a${reset}.
!ls -a£No
Some ${voc}options${reset} also have a long version, sometimes easier to remember, which starts with ${code}-${reset}.
For example you can replace ${code}-a${reset} with ${code}- all${reset}.
+List all items of ${code}$HOME${reset} with ${learn}ls --all $HOME${reset}.
!ls --all $HOME£No
The ${code}ls -a${reset} and ${code}ls --all${reset} commands are identical!
But how to retain all options of all orders?
In fact you do not need to memorize them!
You can still access the ${voc}manual${reset} of a command with the command ${learn}man${reset}.
To exit the manual, press the 'q' key on your keyboard, such as ${voc}q${reset} uitter.
+Open the manual of the ls command with ${learn}man ls${reset}, quickly fly over its contents, and finally leave with the key 'q'.
!man ls£No
If you have forgotten some options of a command, you can still open its manual.
If you ask a question on the internet about a command, but the answer is in the manual, it is possible that you have the answer: RTFM.
It is an acronym for 'Read The Fucking Manual' or 'Read the Fuck of Manuel'.
Learning to read manuals is essential to be able to cope with simple problems.
With repetition you should remember the most important options, but always have the reflex to visit the manual before asking for help. The manual will always be there for you.
+Do it for ${code}rmdir${reset}, look quickly at the options available in the manual and quit with the 'q' key: ${learn}man rmdir${reset}
!man rmdir£No
Most commands have a ${code}--help${reset} option, which displays the help of the command. Sometimes it's just the content of the manual.
+Show rmdir help with ${learn}rmdir --help${reset}
!rmdir --help£No
Excellent, now let's see other options.
+First move to your root directory with the command ${learn}cd /${reset}
!cd /£No
+Display the elements of the current directory.
!ls£No
${learn}ls${reset} defaults to the full length of the terminal for display.
But it is possible to limit its length with the option ${code}-w${reset}.
+Open the ${code}ls${reset} manual, read the details of the ${code}-w${reset} option, and exit the manual.
!man ls£No
Some options, like here ${code}-w${reset}, must also have values.
To use the ${code}-w${reset} option, you must give it a numeric value that matches the number of characters per line.
If you limit this value to 1, for example, you can be sure that there will only be one file name per line.
+Try this command: ${learn}ls -w 1${reset}
!ls -w 1£No
+Now try 100 as limit with: ${learn}ls -w 100${reset}
!ls -w 100£No
The long version of the options with value is sometimes different, with the use of the sign ${code}=${reset} instead of a space.
+Try using the long version with ${learn}ls --width=100${reset}
!ls --width=100£No
Again, there is no need to memorize all available options.
You will have to learn how to use ${code}man${reset}.
You are ready for the questionnaire! Go check your knowledge!
#clean
